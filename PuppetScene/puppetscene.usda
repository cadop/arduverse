#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (-22.575211921138788, 562.0260248857611, 50000)
                double radius = 921.1857421875
            }
            dictionary Perspective = {
                double3 position = (694.5164308113116, 524.0538351006744, 1737.7165655951458)
                double3 target = (-327.8475193569076, 464.2816702162573, -664.7688941709462)
            }
            dictionary Right = {
                double3 position = (-50000, 105.39719580934776, 108.83413664165293)
                double radius = 574.436962890625
            }
            dictionary Top = {
                double3 position = (16.28864210697641, 50000, 69.82489920275945)
                double radius = 322.69619140625
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_single.usd"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary physicsSettings = {
            int "/persistent/simulation/minFrameRate" = 60
            bool "/physics/updateForceSensorsToUsd" = 0
            bool "/physics/updateParticlesToUsd" = 0
            bool "/physics/updateVelocitiesToUsd" = 0
        }
        int refinementOverrideImplVersion = 0
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            bool "rtx:pathtracing:mgpu:autoLoadBalancing:enabled" = 0
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            double "rtx:post:lensFlares:flareScale" = 0.075
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0, 0, 0)
        }
    }
    defaultPrim = "World"
    doc = """Generated from Composed Stage of root layer omniverse://f51e1668-4974-41d4-8ee5-7d770e874501.cne.ngc.nvidia.com/Projects/Schwartz%20-%20Keep%20Out/Puppet/Collected_demoscene/demoscene.usd


Generated from Composed Stage of root layer omniverse://f51e1668-4974-41d4-8ee5-7d770e874501.cne.ngc.nvidia.com/Projects/Schwartz%20-%20Keep%20Out/Puppet/humanoid_mesh_joint_linked_modeled_ropes_attached.usd


Generated from Composed Stage of root layer G:\\ProjectRepos\\iotomni\\humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual.usd
"""
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def PhysicsScene "PhysicsScene" (
        prepend apiSchemas = ["PhysxSceneAPI"]
    )
    {
        vector3f physics:gravityDirection = (0, -1, 0)
        float physics:gravityMagnitude = 981
        float physxScene:bounceThreshold = 1500
        uniform token physxScene:broadphaseType = "SAP"
        uniform token physxScene:collisionSystem = "PCM"
        bool physxScene:enableGPUDynamics = 0
        bool physxScene:enableSceneQuerySupport = 0
        bool physxScene:enableStabilization = 1
        uint physxScene:gpuMaxNumPartitions = 32
        uint physxScene:maxIterationCount = 255
        uniform token physxScene:solverType = "TGS"
        uint physxScene:timeStepsPerSecond = 50
        uniform token physxScene:updateType = "Synchronous"
    }

    def Xform "Head" (
        instanceable = false
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, -90)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.3091979980468548, 183.13879569801645, 46.00000000000129)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Capsule "Link0" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 0
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            int physxRigidBody:solverPositionIterationCount = 255
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-396.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Controller/CentralBox>
                rel physics:body1 = </World/Head/Link0>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (0.36098123, -58.915775, 7.947994)
                point3f physics:localPos1 = (-7.4199705, 0.0000010073214, 0)
                quatf physics:localRot0 = (0.70710677, 0, 0, -0.70710677)
                quatf physics:localRot1 = (1, 0, 0, -6.717943e-8)
            }
        }

        def Capsule "Link1" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
            customData = {
                dictionary physics = {
                    bool localSpaceVelocities = 0
                }
            }
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 0
            float physics:density = 0.00005
            quatf physics:principalAxes = (0, 0, 0, 0)
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            bool physxRigidBody:disableGravity = 1
            bool physxRigidBody:enableGyroscopicForces = 0
            float physxRigidBody:maxAngularVelocity = 10
            float physxRigidBody:maxLinearVelocity = 10
            bool physxRigidBody:solveContact = 0
            int physxRigidBody:solverPositionIterationCount = 16
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-383.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:rotZ", "PhysicsLimitAPI:rotY", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:transZ", "PhysxLimitAPI:transX", "PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysxJointAPI"]
            )
            {
                float drive:rotY:physics:damping = 0
                float drive:rotY:physics:stiffness = 0
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 0
                float drive:rotZ:physics:stiffness = 0
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link0>
                rel physics:body1 = </World/Head/Link1>
                uniform bool physics:excludeFromArticulation = 0
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
                float physxJoint:maxJointVelocity = 100
                float physxLimit:transX:bounceThreshold = 0
                float physxLimit:transX:contactDistance = 0
                float physxLimit:transX:damping = 0
                float physxLimit:transX:restitution = 0
                float physxLimit:transX:stiffness = 0
            }
        }

        def Capsule "Link2" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            float physxRigidBody:linearDamping = 0
            float physxRigidBody:maxContactImpulse = inf
            float physxRigidBody:maxDepenetrationVelocity = 300
            float physxRigidBody:maxLinearVelocity = inf
            int physxRigidBody:solverPositionIterationCount = 16
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-370.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link1>
                rel physics:body1 = </World/Head/Link2>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link3" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            bool physics:collisionEnabled = 1
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            float physxRigidBody:linearDamping = 0
            float physxRigidBody:maxContactImpulse = inf
            float physxRigidBody:maxDepenetrationVelocity = 300
            float physxRigidBody:maxLinearVelocity = inf
            int physxRigidBody:solverPositionIterationCount = 16
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            bool primvars:doNotCastShadows = 0
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-357.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link2>
                rel physics:body1 = </World/Head/Link3>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link4" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-344.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link3>
                rel physics:body1 = </World/Head/Link4>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link5" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-331.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link4>
                rel physics:body1 = </World/Head/Link5>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link6" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-318.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link5>
                rel physics:body1 = </World/Head/Link6>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link7" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            int physxRigidBody:solverPositionIterationCount = 16
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-305.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link6>
                rel physics:body1 = </World/Head/Link7>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link8" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-292.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link7>
                rel physics:body1 = </World/Head/Link8>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link9" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-279.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link8>
                rel physics:body1 = </World/Head/Link9>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link10" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-266.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link9>
                rel physics:body1 = </World/Head/Link10>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link11" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-253.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link10>
                rel physics:body1 = </World/Head/Link11>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link12" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-240.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link11>
                rel physics:body1 = </World/Head/Link12>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link13" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-227.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link12>
                rel physics:body1 = </World/Head/Link13>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link14" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-214.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link13>
                rel physics:body1 = </World/Head/Link14>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link15" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-201.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link14>
                rel physics:body1 = </World/Head/Link15>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link16" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-188.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link15>
                rel physics:body1 = </World/Head/Link16>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link17" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-175.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link16>
                rel physics:body1 = </World/Head/Link17>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link18" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-162.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link17>
                rel physics:body1 = </World/Head/Link18>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link19" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-149.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link18>
                rel physics:body1 = </World/Head/Link19>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link20" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-136.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link19>
                rel physics:body1 = </World/Head/Link20>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link21" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-123.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link20>
                rel physics:body1 = </World/Head/Link21>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link22" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-110.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/Head/Link21>
                rel physics:body1 = </World/Head/Link22>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "L_Hand" (
        instanceable = false
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, -90)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (101, 184.44799369606528, 117.00000000000227)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Capsule "Link0" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-396.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Controller/HandBar>
                rel physics:body1 = </World/L_Hand/Link0>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-47.255592, -42.98586, -0.50505507)
                point3f physics:localPos1 = (-2.856026, -3.3537617e-12, 0)
                quatf physics:localRot0 = (-1.7114271e-8, 0, 0, 1)
                quatf physics:localRot1 = (1, 0, 0, -6.717943e-8)
            }
        }

        def Capsule "Link1" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-383.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link0>
                rel physics:body1 = </World/L_Hand/Link1>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link2" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-370.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link1>
                rel physics:body1 = </World/L_Hand/Link2>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link3" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-357.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link2>
                rel physics:body1 = </World/L_Hand/Link3>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link4" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-344.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link3>
                rel physics:body1 = </World/L_Hand/Link4>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link5" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-331.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link4>
                rel physics:body1 = </World/L_Hand/Link5>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link6" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-318.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link5>
                rel physics:body1 = </World/L_Hand/Link6>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link7" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-305.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link6>
                rel physics:body1 = </World/L_Hand/Link7>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link8" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-292.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link7>
                rel physics:body1 = </World/L_Hand/Link8>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link9" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-279.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link8>
                rel physics:body1 = </World/L_Hand/Link9>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link10" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-266.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link9>
                rel physics:body1 = </World/L_Hand/Link10>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link11" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-253.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link10>
                rel physics:body1 = </World/L_Hand/Link11>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link12" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-240.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link11>
                rel physics:body1 = </World/L_Hand/Link12>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link13" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-227.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link12>
                rel physics:body1 = </World/L_Hand/Link13>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link14" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-214.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link13>
                rel physics:body1 = </World/L_Hand/Link14>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link15" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-201.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link14>
                rel physics:body1 = </World/L_Hand/Link15>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link16" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-188.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link15>
                rel physics:body1 = </World/L_Hand/Link16>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link17" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-175.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link16>
                rel physics:body1 = </World/L_Hand/Link17>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link18" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-162.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link17>
                rel physics:body1 = </World/L_Hand/Link18>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link19" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-149.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link18>
                rel physics:body1 = </World/L_Hand/Link19>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link20" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-136.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link19>
                rel physics:body1 = </World/L_Hand/Link20>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link21" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-123.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link20>
                rel physics:body1 = </World/L_Hand/Link21>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link22" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-110.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link21>
                rel physics:body1 = </World/L_Hand/Link22>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link23" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-97.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link22>
                rel physics:body1 = </World/L_Hand/Link23>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link24" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-84.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link23>
                rel physics:body1 = </World/L_Hand/Link24>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link25" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-71.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Hand/Link24>
                rel physics:body1 = </World/L_Hand/Link25>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "R_Hand" (
        instanceable = false
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, -90)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-100.00000000000068, 184.44799369606216, 116.00000000000259)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Capsule "Link0" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-396.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Controller/HandBar>
                rel physics:body1 = </World/R_Hand/Link0>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-49.246002, 44.02541, -5.4611115)
                point3f physics:localPos1 = (-2.4544597, 2.7569058e-12, 0)
                quatf physics:localRot0 = (-1.7114271e-8, 0, 0, 1)
                quatf physics:localRot1 = (1, 0, 0, -6.717943e-8)
            }
        }

        def Capsule "Link1" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-383.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link0>
                rel physics:body1 = </World/R_Hand/Link1>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link2" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-370.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link1>
                rel physics:body1 = </World/R_Hand/Link2>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link3" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            int physxRigidBody:solverPositionIterationCount = 16
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-357.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link2>
                rel physics:body1 = </World/R_Hand/Link3>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link4" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-344.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link3>
                rel physics:body1 = </World/R_Hand/Link4>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link5" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-331.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link4>
                rel physics:body1 = </World/R_Hand/Link5>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link6" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-318.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link5>
                rel physics:body1 = </World/R_Hand/Link6>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link7" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-305.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link6>
                rel physics:body1 = </World/R_Hand/Link7>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link8" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-292.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link7>
                rel physics:body1 = </World/R_Hand/Link8>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link9" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-279.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link8>
                rel physics:body1 = </World/R_Hand/Link9>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link10" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-266.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link9>
                rel physics:body1 = </World/R_Hand/Link10>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link11" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-253.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link10>
                rel physics:body1 = </World/R_Hand/Link11>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link12" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-240.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link11>
                rel physics:body1 = </World/R_Hand/Link12>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link13" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-227.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link12>
                rel physics:body1 = </World/R_Hand/Link13>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link14" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-214.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link13>
                rel physics:body1 = </World/R_Hand/Link14>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link15" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-201.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link14>
                rel physics:body1 = </World/R_Hand/Link15>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link16" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-188.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link15>
                rel physics:body1 = </World/R_Hand/Link16>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link17" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-175.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link16>
                rel physics:body1 = </World/R_Hand/Link17>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link18" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-162.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link17>
                rel physics:body1 = </World/R_Hand/Link18>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link19" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-149.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link18>
                rel physics:body1 = </World/R_Hand/Link19>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link20" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-136.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link19>
                rel physics:body1 = </World/R_Hand/Link20>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link21" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-123.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link20>
                rel physics:body1 = </World/R_Hand/Link21>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link22" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-110.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link21>
                rel physics:body1 = </World/R_Hand/Link22>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link23" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-97.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link22>
                rel physics:body1 = </World/R_Hand/Link23>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link24" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-84.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link23>
                rel physics:body1 = </World/R_Hand/Link24>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link25" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-71.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Hand/Link24>
                rel physics:body1 = </World/R_Hand/Link25>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "L_Leg" (
        instanceable = false
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, -96)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (30.0000000000001, 184.44799369606238, 78.00000000000121)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Capsule "Link0" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-396.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Controller/LegBar>
                rel physics:body1 = </World/L_Leg/Link0>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-46.935463, -45.58174, -7.7015142)
                point3f physics:localPos1 = (-5.5199633, 0.000007877596, 0)
                quatf physics:localRot0 = (0.052335933, 0, 0, 0.9986295)
                quatf physics:localRot1 = (1, 0, 0, 2.2833202e-8)
            }
        }

        def Capsule "Link1" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-383.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link0>
                rel physics:body1 = </World/L_Leg/Link1>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link2" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-370.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link1>
                rel physics:body1 = </World/L_Leg/Link2>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link3" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-357.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link2>
                rel physics:body1 = </World/L_Leg/Link3>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link4" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-344.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link3>
                rel physics:body1 = </World/L_Leg/Link4>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link5" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-331.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link4>
                rel physics:body1 = </World/L_Leg/Link5>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link6" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-318.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link5>
                rel physics:body1 = </World/L_Leg/Link6>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link7" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-305.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link6>
                rel physics:body1 = </World/L_Leg/Link7>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link8" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-292.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link7>
                rel physics:body1 = </World/L_Leg/Link8>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link9" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-279.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link8>
                rel physics:body1 = </World/L_Leg/Link9>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link10" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-266.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link9>
                rel physics:body1 = </World/L_Leg/Link10>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link11" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-253.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link10>
                rel physics:body1 = </World/L_Leg/Link11>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link12" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-240.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link11>
                rel physics:body1 = </World/L_Leg/Link12>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link13" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-227.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link12>
                rel physics:body1 = </World/L_Leg/Link13>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link14" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-214.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link13>
                rel physics:body1 = </World/L_Leg/Link14>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link15" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-201.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link14>
                rel physics:body1 = </World/L_Leg/Link15>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link16" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-188.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link15>
                rel physics:body1 = </World/L_Leg/Link16>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link17" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-175.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link16>
                rel physics:body1 = </World/L_Leg/Link17>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link18" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-162.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link17>
                rel physics:body1 = </World/L_Leg/Link18>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link19" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-149.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link18>
                rel physics:body1 = </World/L_Leg/Link19>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link20" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-136.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link19>
                rel physics:body1 = </World/L_Leg/Link20>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link21" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-123.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link20>
                rel physics:body1 = </World/L_Leg/Link21>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link22" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-110.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link21>
                rel physics:body1 = </World/L_Leg/Link22>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link23" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-97.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link22>
                rel physics:body1 = </World/L_Leg/Link23>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link24" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-84.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link23>
                rel physics:body1 = </World/L_Leg/Link24>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link25" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-71.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link24>
                rel physics:body1 = </World/L_Leg/Link25>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link26" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-58.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link25>
                rel physics:body1 = </World/L_Leg/Link26>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link27" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-45.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link26>
                rel physics:body1 = </World/L_Leg/Link27>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link28" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-32.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link27>
                rel physics:body1 = </World/L_Leg/Link28>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link29" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-19.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link28>
                rel physics:body1 = </World/L_Leg/Link29>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link30" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-6.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link29>
                rel physics:body1 = </World/L_Leg/Link30>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link31" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (6.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link30>
                rel physics:body1 = </World/L_Leg/Link31>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link32" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (19.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link31>
                rel physics:body1 = </World/L_Leg/Link32>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link33" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (32.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link32>
                rel physics:body1 = </World/L_Leg/Link33>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link34" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (45.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link33>
                rel physics:body1 = </World/L_Leg/Link34>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link35" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (58.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link34>
                rel physics:body1 = </World/L_Leg/Link35>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link36" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (71.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link35>
                rel physics:body1 = </World/L_Leg/Link36>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link37" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (84.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link36>
                rel physics:body1 = </World/L_Leg/Link37>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link38" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (97.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link37>
                rel physics:body1 = </World/L_Leg/Link38>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link39" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (110.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/L_Leg/Link38>
                rel physics:body1 = </World/L_Leg/Link39>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Xform "Controller" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "OmniScriptingAPI"]
    )
    {
        uniform asset[] omni:scripting:scripts = [@./puppet_handle_2.py@] (
            customData = {
                dictionary fileExts = {
                    string "*.py" = "Python File"
                }
            }
        )
        bool physics:kinematicEnabled = 1
        bool physics:rigidBodyEnabled = 1
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (0.856551468372345, 0.1382780522108078, 5.787623882293701)
        double3 xformOp:translate = (-0.284820853007266, 797.923347685437, 5.284661597215745e-13)
        double3 xformOp:translate:pivot = (1.9855264447499366, -235.24739807772232, -7.000000000000001)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:translate:pivot", "xformOp:rotateXYZ", "xformOp:scale", "!invert!xformOp:translate:pivot"]

        def Mesh "HandBar" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCookedDataAPI:convexHull"]
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 32, 33, 1, 1, 33, 34, 2, 2, 34, 35, 3, 3, 35, 36, 4, 4, 36, 37, 5, 5, 37, 38, 6, 6, 38, 39, 7, 7, 39, 40, 8, 8, 40, 41, 9, 9, 41, 42, 10, 10, 42, 43, 11, 11, 43, 44, 12, 12, 44, 45, 13, 13, 45, 46, 14, 14, 46, 47, 15, 15, 47, 48, 16, 16, 48, 49, 17, 17, 49, 50, 18, 18, 50, 51, 19, 19, 51, 52, 20, 20, 52, 53, 21, 21, 53, 54, 22, 22, 54, 55, 23, 23, 55, 56, 24, 24, 56, 57, 25, 25, 57, 58, 26, 26, 58, 59, 27, 27, 59, 60, 28, 28, 60, 61, 29, 29, 61, 62, 30, 30, 62, 63, 31, 31, 63, 32, 0, 0, 1, 64, 1, 2, 64, 2, 3, 64, 3, 4, 64, 4, 5, 64, 5, 6, 64, 6, 7, 64, 7, 8, 64, 8, 9, 64, 9, 10, 64, 10, 11, 64, 11, 12, 64, 12, 13, 64, 13, 14, 64, 14, 15, 64, 15, 16, 64, 16, 17, 64, 17, 18, 64, 18, 19, 64, 19, 20, 64, 20, 21, 64, 21, 22, 64, 22, 23, 64, 23, 24, 64, 24, 25, 64, 25, 26, 64, 26, 27, 64, 27, 28, 64, 28, 29, 64, 29, 30, 64, 30, 31, 64, 31, 0, 64, 32, 65, 33, 33, 65, 34, 34, 65, 35, 35, 65, 36, 36, 65, 37, 37, 65, 38, 38, 65, 39, 39, 65, 40, 40, 65, 41, 41, 65, 42, 42, 65, 43, 43, 65, 44, 44, 65, 45, 45, 65, 46, 46, 65, 47, 47, 65, 48, 48, 65, 49, 49, 65, 50, 50, 65, 51, 51, 65, 52, 52, 65, 53, 53, 65, 54, 54, 65, 55, 55, 65, 56, 56, 65, 57, 57, 65, 58, 58, 65, 59, 59, 65, 60, 60, 65, 61, 61, 65, 62, 62, 65, 63, 63, 65, 32]
            rel material:binding = </World/Looks/Ash> (
                bindMaterialAs = "weakerThanDescendants"
            )
            normal3f[] normals = [(50, 0, 0), (50, 0, 0), (49.03926, 0, 9.754517), (49.03926, 0, 9.754517), (49.03926, 0, 9.754517), (49.03926, 0, 9.754517), (46.193974, 0, 19.13417), (46.193974, 0, 19.13417), (46.193974, 0, 19.13417), (46.193974, 0, 19.13417), (41.57348, 0, 27.778513), (41.57348, 0, 27.778513), (41.57348, 0, 27.778513), (41.57348, 0, 27.778513), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (27.778513, 0, 41.57348), (27.778513, 0, 41.57348), (27.778513, 0, 41.57348), (27.778513, 0, 41.57348), (19.13417, 0, 46.193974), (19.13417, 0, 46.193974), (19.13417, 0, 46.193974), (19.13417, 0, 46.193974), (9.754517, 0, 49.03926), (9.754517, 0, 49.03926), (9.754517, 0, 49.03926), (9.754517, 0, 49.03926), (3.061617e-15, 0, 50), (3.061617e-15, 0, 50), (3.061617e-15, 0, 50), (3.061617e-15, 0, 50), (-9.754517, 0, 49.03926), (-9.754517, 0, 49.03926), (-9.754517, 0, 49.03926), (-9.754517, 0, 49.03926), (-19.13417, 0, 46.193974), (-19.13417, 0, 46.193974), (-19.13417, 0, 46.193974), (-19.13417, 0, 46.193974), (-27.778513, 0, 41.57348), (-27.778513, 0, 41.57348), (-27.778513, 0, 41.57348), (-27.778513, 0, 41.57348), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-41.57348, 0, 27.778513), (-41.57348, 0, 27.778513), (-41.57348, 0, 27.778513), (-41.57348, 0, 27.778513), (-46.193974, 0, 19.13417), (-46.193974, 0, 19.13417), (-46.193974, 0, 19.13417), (-46.193974, 0, 19.13417), (-49.03926, 0, 9.754517), (-49.03926, 0, 9.754517), (-49.03926, 0, 9.754517), (-49.03926, 0, 9.754517), (-50, 0, 6.123234e-15), (-50, 0, 6.123234e-15), (-50, 0, 6.123234e-15), (-50, 0, 6.123234e-15), (-49.03926, 0, -9.754517), (-49.03926, 0, -9.754517), (-49.03926, 0, -9.754517), (-49.03926, 0, -9.754517), (-46.193974, 0, -19.13417), (-46.193974, 0, -19.13417), (-46.193974, 0, -19.13417), (-46.193974, 0, -19.13417), (-41.57348, 0, -27.778513), (-41.57348, 0, -27.778513), (-41.57348, 0, -27.778513), (-41.57348, 0, -27.778513), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-27.778513, 0, -41.57348), (-27.778513, 0, -41.57348), (-27.778513, 0, -41.57348), (-27.778513, 0, -41.57348), (-19.13417, 0, -46.193974), (-19.13417, 0, -46.193974), (-19.13417, 0, -46.193974), (-19.13417, 0, -46.193974), (-9.754517, 0, -49.03926), (-9.754517, 0, -49.03926), (-9.754517, 0, -49.03926), (-9.754517, 0, -49.03926), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (9.754517, 0, -49.03926), (9.754517, 0, -49.03926), (9.754517, 0, -49.03926), (9.754517, 0, -49.03926), (19.13417, 0, -46.193974), (19.13417, 0, -46.193974), (19.13417, 0, -46.193974), (19.13417, 0, -46.193974), (27.778513, 0, -41.57348), (27.778513, 0, -41.57348), (27.778513, 0, -41.57348), (27.778513, 0, -41.57348), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (41.57348, 0, -27.778513), (41.57348, 0, -27.778513), (41.57348, 0, -27.778513), (41.57348, 0, -27.778513), (46.193974, 0, -19.13417), (46.193974, 0, -19.13417), (46.193974, 0, -19.13417), (46.193974, 0, -19.13417), (49.03926, 0, -9.754517), (49.03926, 0, -9.754517), (49.03926, 0, -9.754517), (49.03926, 0, -9.754517), (50, 0, 0), (50, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 0
            uchar[] physxCookedData:convexHull:buffer = [9, 209, 247, 169, 80, 192, 167, 192, 109, 170, 252, 194, 183, 56, 53, 105, 182, 78, 88, 83, 1, 67, 86, 88, 77, 14, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 62, 0, 0, 0, 93, 128, 0, 0, 33, 0, 0, 0, 186, 0, 0, 0, 108, 74, 50, 194, 2, 0, 72, 66, 228, 253, 192, 65, 108, 74, 50, 194, 2, 0, 72, 194, 228, 253, 192, 65, 22, 206, 67, 194, 2, 0, 72, 66, 160, 94, 42, 65, 22, 206, 67, 194, 2, 0, 72, 194, 160, 94, 42, 65, 1, 0, 72, 194, 2, 0, 72, 194, 0, 0, 0, 128, 1, 0, 72, 194, 2, 0, 72, 66, 0, 0, 0, 128, 22, 206, 67, 66, 2, 0, 72, 194, 176, 94, 42, 193, 22, 206, 67, 66, 2, 0, 72, 66, 176, 94, 42, 193, 1, 0, 72, 66, 2, 0, 72, 194, 0, 0, 0, 128, 1, 0, 72, 66, 2, 0, 72, 66, 0, 0, 0, 128, 176, 94, 42, 193, 2, 0, 72, 194, 22, 206, 67, 194, 0, 0, 0, 128, 2, 0, 72, 194, 1, 0, 72, 194, 176, 94, 42, 193, 2, 0, 72, 66, 22, 206, 67, 194, 0, 0, 0, 128, 2, 0, 72, 66, 1, 0, 72, 194, 160, 94, 42, 65, 2, 0, 72, 194, 22, 206, 67, 66, 0, 0, 0, 128, 2, 0, 72, 194, 1, 0, 72, 66, 0, 0, 0, 128, 2, 0, 72, 66, 1, 0, 72, 66, 160, 94, 42, 65, 2, 0, 72, 66, 22, 206, 67, 66, 52, 40, 68, 194, 2, 0, 72, 194, 96, 18, 28, 193, 160, 198, 56, 194, 2, 0, 72, 194, 192, 18, 153, 193, 160, 198, 56, 194, 2, 0, 72, 66, 192, 18, 153, 193, 52, 40, 68, 194, 2, 0, 72, 66, 96, 18, 28, 193, 52, 40, 68, 66, 2, 0, 72, 194, 96, 18, 28, 65, 160, 198, 56, 66, 2, 0, 72, 194, 192, 18, 153, 65, 160, 198, 56, 66, 2, 0, 72, 66, 192, 18, 153, 65, 52, 40, 68, 66, 2, 0, 72, 66, 96, 18, 28, 65, 96, 18, 28, 193, 2, 0, 72, 194, 52, 40, 68, 66, 192, 18, 153, 193, 2, 0, 72, 194, 160, 198, 56, 66, 192, 18, 153, 193, 2, 0, 72, 66, 160, 198, 56, 66, 96, 18, 28, 193, 2, 0, 72, 66, 52, 40, 68, 66, 96, 18, 28, 65, 2, 0, 72, 194, 52, 40, 68, 194, 192, 18, 153, 65, 2, 0, 72, 194, 160, 198, 56, 194, 192, 18, 153, 65, 2, 0, 72, 66, 160, 198, 56, 194, 96, 18, 28, 65, 2, 0, 72, 66, 52, 40, 68, 194, 62, 75, 38, 194, 2, 0, 72, 194, 104, 58, 222, 193, 224, 107, 13, 194, 2, 0, 72, 194, 224, 107, 13, 194, 224, 107, 13, 194, 2, 0, 72, 66, 224, 107, 13, 194, 62, 75, 38, 194, 2, 0, 72, 66, 104, 58, 222, 193, 62, 75, 38, 66, 2, 0, 72, 194, 104, 58, 222, 65, 224, 107, 13, 66, 2, 0, 72, 194, 224, 107, 13, 66, 224, 107, 13, 66, 2, 0, 72, 66, 224, 107, 13, 66, 62, 75, 38, 66, 2, 0, 72, 66, 104, 58, 222, 65, 104, 58, 222, 193, 2, 0, 72, 194, 62, 75, 38, 66, 224, 107, 13, 194, 2, 0, 72, 194, 224, 107, 13, 66, 224, 107, 13, 194, 2, 0, 72, 66, 224, 107, 13, 66, 104, 58, 222, 193, 2, 0, 72, 66, 62, 75, 38, 66, 104, 58, 222, 65, 2, 0, 72, 194, 62, 75, 38, 194, 224, 107, 13, 66, 2, 0, 72, 194, 224, 107, 13, 194, 224, 107, 13, 66, 2, 0, 72, 66, 224, 107, 13, 194, 104, 58, 222, 65, 2, 0, 72, 66, 62, 75, 38, 194, 104, 58, 222, 193, 2, 0, 72, 194, 62, 75, 38, 194, 208, 18, 153, 193, 2, 0, 72, 194, 154, 198, 56, 194, 208, 18, 153, 193, 2, 0, 72, 66, 154, 198, 56, 194, 104, 58, 222, 193, 2, 0, 72, 66, 62, 75, 38, 194, 216, 18, 153, 65, 2, 0, 72, 194, 154, 198, 56, 66, 104, 58, 222, 65, 2, 0, 72, 194, 62, 75, 38, 66, 216, 18, 153, 65, 2, 0, 72, 66, 154, 198, 56, 66, 104, 58, 222, 65, 2, 0, 72, 66, 62, 75, 38, 66, 154, 198, 56, 66, 2, 0, 72, 194, 208, 18, 153, 193, 154, 198, 56, 66, 2, 0, 72, 66, 208, 18, 153, 193, 62, 75, 38, 66, 2, 0, 72, 194, 104, 58, 222, 193, 62, 75, 38, 66, 2, 0, 72, 66, 104, 58, 222, 193, 0, 0, 0, 128, 0, 0, 128, 191, 0, 0, 0, 0, 2, 0, 72, 194, 0, 0, 31, 0, 114, 120, 115, 191, 0, 0, 0, 0, 116, 55, 158, 62, 40, 98, 71, 194, 31, 0, 4, 6, 114, 120, 115, 63, 0, 0, 0, 0, 116, 55, 158, 190, 41, 98, 71, 194, 35, 0, 4, 2, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 2, 0, 72, 194, 39, 0, 31, 1, 116, 55, 158, 62, 0, 0, 0, 128, 114, 120, 115, 63, 40, 98, 71, 194, 70, 0, 4, 10, 116, 55, 158, 190, 0, 0, 0, 0, 114, 120, 115, 191, 41, 98, 71, 194, 74, 0, 4, 14, 153, 197, 97, 191, 0, 0, 0, 0, 227, 90, 241, 190, 116, 9, 71, 194, 78, 0, 4, 38, 153, 197, 97, 63, 0, 0, 0, 0, 227, 90, 241, 62, 116, 9, 71, 194, 82, 0, 4, 34, 227, 90, 241, 190, 0, 0, 0, 0, 153, 197, 97, 63, 116, 9, 71, 194, 86, 0, 4, 46, 227, 90, 241, 62, 0, 0, 0, 0, 153, 197, 97, 191, 116, 9, 71, 194, 90, 0, 4, 42, 109, 196, 126, 191, 0, 0, 0, 0, 96, 189, 200, 189, 118, 9, 71, 194, 94, 0, 4, 8, 109, 196, 126, 63, 0, 0, 0, 0, 96, 189, 200, 61, 118, 9, 71, 194, 98, 0, 4, 4, 96, 189, 200, 189, 0, 0, 0, 0, 109, 196, 126, 63, 118, 9, 71, 194, 102, 0, 4, 11, 96, 189, 200, 61, 0, 0, 0, 0, 109, 196, 126, 191, 118, 9, 71, 194, 106, 0, 4, 15, 153, 103, 34, 191, 0, 0, 0, 0, 5, 228, 69, 191, 118, 9, 71, 194, 110, 0, 4, 39, 153, 103, 34, 63, 0, 0, 0, 0, 5, 228, 69, 63, 118, 9, 71, 194, 114, 0, 4, 35, 5, 228, 69, 63, 0, 0, 0, 0, 153, 103, 34, 191, 118, 9, 71, 194, 118, 0, 4, 43, 5, 228, 69, 191, 0, 0, 0, 0, 153, 103, 34, 63, 118, 9, 71, 194, 122, 0, 4, 47, 109, 196, 126, 191, 0, 0, 0, 0, 96, 189, 200, 61, 118, 9, 71, 194, 126, 0, 4, 6, 109, 196, 126, 63, 0, 0, 0, 0, 96, 189, 200, 189, 118, 9, 71, 194, 130, 0, 4, 2, 96, 189, 200, 189, 0, 0, 0, 0, 109, 196, 126, 191, 118, 9, 71, 194, 134, 0, 4, 14, 96, 189, 200, 61, 0, 0, 0, 0, 109, 196, 126, 63, 118, 9, 71, 194, 138, 0, 4, 10, 11, 250, 116, 191, 0, 0, 0, 0, 51, 160, 148, 190, 116, 9, 71, 194, 142, 0, 4, 22, 11, 250, 116, 63, 0, 0, 0, 0, 51, 160, 148, 62, 116, 9, 71, 194, 146, 0, 4, 18, 51, 160, 148, 190, 0, 0, 0, 0, 11, 250, 116, 63, 116, 9, 71, 194, 150, 0, 4, 30, 51, 160, 148, 62, 0, 0, 0, 0, 11, 250, 116, 191, 116, 9, 71, 194, 154, 0, 4, 26, 5, 228, 69, 191, 0, 0, 0, 0, 153, 103, 34, 191, 118, 9, 71, 194, 158, 0, 4, 39, 5, 228, 69, 63, 0, 0, 0, 0, 153, 103, 34, 63, 118, 9, 71, 194, 162, 0, 4, 35, 153, 103, 34, 191, 0, 0, 0, 0, 5, 228, 69, 63, 118, 9, 71, 194, 166, 0, 4, 47, 153, 103, 34, 63, 0, 0, 0, 0, 5, 228, 69, 191, 118, 9, 71, 194, 170, 0, 4, 43, 227, 90, 241, 190, 0, 0, 0, 0, 153, 197, 97, 191, 116, 9, 71, 194, 174, 0, 4, 55, 227, 90, 241, 62, 0, 0, 0, 0, 153, 197, 97, 63, 116, 9, 71, 194, 178, 0, 4, 50, 153, 197, 97, 63, 0, 0, 0, 0, 227, 90, 241, 190, 116, 9, 71, 194, 182, 0, 4, 0, 54, 14, 15, 26, 27, 42, 43, 1, 3, 4, 18, 19, 34, 35, 50, 51, 10, 11, 30, 31, 46, 47, 60, 58, 6, 8, 22, 23, 38, 39, 55, 0, 2, 3, 1, 6, 58, 59, 7, 12, 52, 53, 36, 37, 20, 21, 5, 2, 0, 44, 45, 28, 29, 16, 17, 56, 57, 40, 41, 24, 25, 9, 7, 59, 61, 48, 49, 32, 33, 13, 56, 17, 14, 54, 10, 51, 52, 12, 20, 37, 34, 19, 24, 41, 38, 23, 42, 27, 28, 45, 46, 31, 32, 49, 5, 21, 18, 4, 9, 25, 22, 8, 26, 15, 16, 29, 30, 11, 13, 33, 50, 35, 36, 53, 55, 39, 40, 57, 60, 47, 48, 61, 0, 1, 43, 44, 3, 2, 5, 4, 6, 7, 9, 8, 11, 10, 12, 13, 15, 14, 17, 16, 19, 18, 21, 20, 23, 22, 25, 24, 27, 26, 29, 28, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 40, 43, 42, 45, 44, 47, 46, 49, 48, 51, 50, 53, 52, 54, 55, 57, 56, 59, 58, 60, 61, 1, 17, 1, 3, 3, 17, 0, 1, 0, 17, 1, 18, 3, 18, 0, 18, 10, 18, 0, 10, 3, 10, 2, 19, 0, 19, 0, 2, 3, 19, 2, 3, 11, 19, 0, 11, 3, 11, 0, 20, 5, 20, 0, 5, 13, 20, 0, 13, 3, 20, 3, 5, 3, 13, 0, 21, 4, 21, 0, 4, 12, 21, 0, 12, 3, 21, 3, 12, 3, 4, 0, 22, 10, 22, 6, 22, 0, 6, 3, 22, 3, 6, 0, 23, 11, 23, 7, 23, 0, 7, 3, 23, 3, 7, 0, 24, 12, 24, 8, 24, 0, 8, 3, 24, 3, 8, 0, 25, 13, 25, 9, 25, 0, 9, 3, 25, 3, 9, 0, 26, 6, 26, 14, 26, 0, 14, 3, 26, 3, 14, 0, 27, 7, 27, 15, 27, 0, 15, 3, 27, 3, 15, 0, 28, 8, 28, 17, 28, 3, 28, 0, 29, 9, 29, 16, 29, 0, 16, 3, 29, 3, 16, 0, 30, 14, 30, 5, 30, 3, 30, 0, 31, 4, 31, 15, 31, 3, 31, 2, 32, 0, 32, 3, 32, 16, 32, 1, 3, 17, 0, 1, 17, 1, 3, 18, 0, 1, 18, 0, 10, 18, 3, 10, 18, 0, 2, 19, 2, 3, 19, 0, 11, 19, 3, 11, 19, 0, 5, 20, 0, 13, 20, 3, 5, 20, 3, 13, 20, 0, 4, 21, 0, 12, 21, 3, 12, 21, 3, 4, 21, 0, 10, 22, 0, 6, 22, 3, 6, 22, 3, 10, 22, 0, 11, 23, 0, 7, 23, 3, 7, 23, 3, 11, 23, 0, 12, 24, 0, 8, 24, 3, 8, 24, 3, 12, 24, 0, 13, 25, 0, 9, 25, 3, 9, 25, 3, 13, 25, 0, 6, 26, 0, 14, 26, 3, 14, 26, 3, 6, 26, 0, 7, 27, 0, 15, 27, 3, 15, 27, 3, 7, 27, 0, 8, 28, 0, 17, 28, 3, 17, 28, 3, 8, 28, 0, 9, 29, 0, 16, 29, 3, 16, 29, 3, 9, 29, 0, 14, 30, 0, 5, 30, 3, 5, 30, 3, 14, 30, 0, 4, 31, 0, 15, 31, 3, 4, 31, 3, 15, 31, 0, 2, 32, 2, 3, 32, 0, 16, 32, 3, 16, 32, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 44, 0, 1, 0, 3, 0, 43, 0, 1, 0, 2, 0, 3, 0, 5, 0, 2, 0, 3, 0, 4, 0, 4, 0, 5, 0, 4, 0, 18, 0, 21, 0, 5, 0, 7, 0, 6, 0, 6, 0, 8, 0, 58, 0, 6, 0, 9, 0, 7, 0, 59, 0, 7, 0, 8, 0, 9, 0, 8, 0, 22, 0, 25, 0, 9, 0, 10, 0, 11, 0, 12, 0, 10, 0, 51, 0, 10, 0, 11, 0, 13, 0, 11, 0, 30, 0, 13, 0, 12, 0, 12, 0, 52, 0, 33, 0, 13, 0, 14, 0, 15, 0, 17, 0, 14, 0, 54, 0, 14, 0, 15, 0, 16, 0, 15, 0, 26, 0, 16, 0, 17, 0, 29, 0, 16, 0, 17, 0, 56, 0, 18, 0, 19, 0, 21, 0, 18, 0, 19, 0, 20, 0, 19, 0, 34, 0, 20, 0, 21, 0, 37, 0, 20, 0, 22, 0, 23, 0, 25, 0, 22, 0, 23, 0, 24, 0, 23, 0, 38, 0, 24, 0, 25, 0, 41, 0, 24, 0, 26, 0, 27, 0, 29, 0, 26, 0, 27, 0, 28, 0, 27, 0, 42, 0, 28, 0, 29, 0, 45, 0, 28, 0, 30, 0, 31, 0, 33, 0, 30, 0, 31, 0, 32, 0, 31, 0, 46, 0, 32, 0, 33, 0, 49, 0, 32, 0, 34, 0, 35, 0, 37, 0, 34, 0, 35, 0, 36, 0, 35, 0, 50, 0, 36, 0, 37, 0, 53, 0, 36, 0, 38, 0, 39, 0, 41, 0, 38, 0, 39, 0, 40, 0, 39, 0, 55, 0, 40, 0, 41, 0, 57, 0, 40, 0, 42, 0, 43, 0, 45, 0, 42, 0, 43, 0, 44, 0, 44, 0, 45, 0, 46, 0, 47, 0, 49, 0, 46, 0, 47, 0, 48, 0, 47, 0, 60, 0, 48, 0, 49, 0, 61, 0, 48, 0, 50, 0, 51, 0, 53, 0, 50, 0, 51, 0, 52, 0, 52, 0, 53, 0, 55, 0, 54, 0, 54, 0, 56, 0, 57, 0, 55, 0, 56, 0, 57, 0, 58, 0, 59, 0, 60, 0, 58, 0, 59, 0, 61, 0, 61, 0, 60, 0, 0, 0, 0, 0, 1, 0, 72, 194, 2, 0, 72, 194, 1, 0, 72, 194, 1, 0, 72, 66, 2, 0, 72, 66, 1, 0, 72, 66, 76, 182, 62, 73, 140, 115, 135, 78, 194, 68, 1, 62, 206, 46, 230, 72, 194, 68, 1, 62, 240, 140, 103, 78, 232, 148, 152, 192, 206, 46, 230, 72, 232, 148, 152, 192, 160, 134, 135, 78, 128, 29, 209, 188, 13, 17, 249, 179, 192, 131, 96, 60, 0, 0, 128, 63, 73, 67, 69, 1, 83, 85, 80, 77, 0, 0, 0, 0, 73, 67, 69, 1, 71, 65, 85, 83, 0, 0, 0, 0, 16, 0, 0, 0, 0, 6, 0, 0, 47, 47, 60, 60, 58, 58, 6, 8, 8, 22, 23, 23, 38, 38, 39, 39, 47, 47, 60, 60, 58, 58, 6, 8, 8, 22, 23, 23, 38, 38, 39, 39, 47, 47, 60, 60, 58, 58, 6, 8, 8, 22, 23, 23, 38, 38, 39, 39, 47, 47, 60, 60, 58, 58, 6, 8, 8, 22, 23, 23, 38, 38, 39, 39, 47, 47, 60, 60, 58, 58, 6, 8, 8, 22, 23, 23, 38, 38, 39, 39, 47, 47, 60, 60, 58, 58, 6, 8, 8, 22, 23, 23, 38, 38, 39, 39, 47, 47, 60, 60, 58, 58, 6, 8, 8, 22, 23, 23, 38, 38, 39, 39, 47, 47, 60, 60, 58, 58, 6, 8, 8, 22, 23, 23, 38, 38, 39, 39, 48, 48, 61, 61, 59, 59, 7, 9, 9, 25, 24, 24, 41, 41, 40, 40, 48, 48, 61, 61, 59, 59, 7, 9, 9, 25, 24, 24, 41, 41, 40, 40, 48, 48, 61, 61, 59, 59, 7, 9, 9, 25, 24, 24, 41, 41, 40, 40, 48, 48, 61, 61, 59, 59, 7, 9, 9, 25, 24, 24, 41, 41, 40, 40, 48, 48, 61, 61, 59, 59, 7, 9, 9, 25, 24, 24, 41, 41, 40, 40, 48, 48, 61, 61, 59, 59, 7, 9, 9, 25, 24, 24, 41, 41, 40, 40, 48, 48, 61, 61, 59, 59, 7, 9, 9, 25, 24, 24, 41, 41, 40, 40, 48, 48, 61, 61, 59, 59, 7, 9, 9, 25, 24, 24, 41, 41, 40, 40, 35, 35, 34, 34, 19, 19, 18, 4, 4, 3, 1, 1, 1, 1, 43, 43, 35, 35, 34, 34, 19, 19, 18, 4, 4, 3, 1, 1, 1, 1, 43, 43, 35, 35, 34, 34, 19, 19, 18, 4, 4, 3, 1, 1, 1, 1, 43, 43, 35, 35, 34, 34, 19, 19, 18, 4, 4, 3, 1, 1, 1, 1, 43, 43, 35, 35, 34, 34, 19, 19, 18, 4, 4, 3, 1, 1, 1, 1, 43, 43, 35, 35, 34, 34, 19, 19, 18, 4, 4, 3, 1, 1, 1, 1, 43, 43, 35, 35, 34, 34, 19, 19, 18, 4, 4, 3, 1, 1, 1, 1, 43, 43, 35, 35, 34, 34, 19, 19, 18, 4, 4, 3, 1, 1, 1, 1, 43, 43, 36, 36, 37, 37, 20, 20, 21, 5, 5, 2, 0, 0, 0, 0, 44, 44, 36, 36, 37, 37, 20, 20, 21, 5, 5, 2, 0, 0, 0, 0, 44, 44, 36, 36, 37, 37, 20, 20, 21, 5, 5, 2, 0, 0, 0, 0, 44, 44, 36, 36, 37, 37, 20, 20, 21, 5, 5, 2, 0, 0, 0, 0, 44, 44, 36, 36, 37, 37, 20, 20, 21, 5, 5, 2, 0, 0, 0, 0, 44, 44, 36, 36, 37, 37, 20, 20, 21, 5, 5, 2, 0, 0, 0, 0, 44, 44, 36, 36, 37, 37, 20, 20, 21, 5, 5, 2, 0, 0, 0, 0, 44, 44, 36, 36, 37, 37, 20, 20, 21, 5, 5, 2, 0, 0, 0, 0, 44, 44, 36, 36, 53, 53, 52, 52, 12, 13, 13, 33, 32, 32, 49, 49, 48, 48, 36, 36, 36, 53, 53, 52, 12, 13, 13, 33, 32, 49, 49, 48, 48, 48, 37, 36, 36, 53, 53, 52, 12, 13, 13, 33, 32, 49, 49, 48, 48, 61, 37, 37, 37, 36, 53, 53, 52, 12, 33, 32, 49, 49, 48, 61, 61, 61, 20, 37, 37, 37, 36, 53, 52, 12, 33, 32, 49, 48, 61, 61, 61, 59, 20, 20, 20, 37, 37, 36, 53, 12, 33, 49, 48, 61, 61, 59, 59, 59, 21, 21, 21, 20, 20, 37, 36, 52, 32, 48, 61, 59, 59, 7, 7, 7, 5, 5, 5, 21, 21, 21, 20, 36, 48, 59, 7, 7, 7, 9, 9, 9, 5, 5, 5, 2, 2, 2, 0, 44, 40, 24, 25, 25, 25, 9, 9, 9, 2, 2, 2, 0, 0, 0, 44, 28, 56, 40, 41, 24, 24, 25, 25, 25, 0, 0, 0, 0, 0, 44, 45, 29, 17, 57, 40, 41, 41, 24, 24, 24, 0, 0, 0, 0, 44, 45, 28, 29, 17, 56, 57, 40, 41, 41, 41, 24, 0, 0, 0, 44, 45, 45, 28, 29, 17, 56, 57, 57, 40, 41, 41, 41, 0, 44, 44, 45, 45, 28, 29, 16, 16, 17, 56, 57, 57, 40, 40, 41, 44, 44, 44, 45, 45, 28, 29, 16, 16, 17, 56, 57, 57, 40, 40, 40, 44, 44, 45, 45, 28, 28, 29, 16, 16, 17, 56, 56, 57, 57, 40, 40, 35, 35, 50, 50, 51, 51, 10, 11, 11, 30, 31, 31, 46, 46, 47, 47, 35, 35, 35, 50, 50, 51, 10, 11, 11, 30, 31, 46, 46, 47, 47, 47, 34, 35, 35, 50, 50, 51, 10, 11, 11, 30, 31, 46, 46, 47, 47, 60, 34, 34, 34, 35, 50, 50, 51, 10, 30, 31, 46, 46, 47, 60, 60, 60, 19, 34, 34, 34, 35, 50, 51, 10, 30, 31, 46, 47, 60, 60, 60, 58, 19, 19, 19, 34, 34, 35, 50, 10, 30, 46, 47, 60, 60, 58, 58, 58, 18, 18, 18, 19, 19, 34, 35, 51, 31, 47, 60, 58, 58, 6, 6, 6, 4, 4, 4, 18, 18, 18, 19, 35, 47, 58, 6, 6, 6, 8, 8, 8, 4, 4, 4, 3, 3, 3, 1, 43, 39, 23, 22, 22, 22, 8, 8, 8, 3, 3, 3, 1, 1, 1, 43, 27, 54, 39, 38, 23, 23, 22, 22, 22, 1, 1, 1, 1, 1, 43, 42, 26, 14, 55, 39, 38, 38, 23, 23, 23, 1, 1, 1, 1, 43, 42, 27, 26, 14, 54, 55, 39, 38, 38, 38, 23, 1, 1, 1, 43, 42, 42, 27, 26, 14, 54, 55, 55, 39, 38, 38, 38, 1, 43, 43, 42, 42, 27, 26, 15, 15, 14, 54, 55, 55, 39, 39, 38, 43, 43, 43, 42, 42, 27, 26, 15, 15, 14, 54, 55, 55, 39, 39, 39, 43, 43, 42, 42, 27, 27, 26, 15, 15, 14, 54, 54, 55, 55, 39, 39, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 42, 42, 42, 42, 42, 42, 42, 42, 45, 45, 45, 45, 45, 45, 45, 45, 42, 42, 42, 42, 42, 42, 42, 42, 45, 45, 45, 45, 45, 45, 45, 45, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 26, 26, 26, 26, 26, 26, 26, 26, 29, 29, 29, 29, 29, 29, 29, 29, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 14, 14, 14, 14, 14, 14, 14, 14, 17, 17, 17, 17, 17, 17, 17, 17, 54, 54, 54, 54, 54, 54, 54, 54, 56, 56, 56, 56, 56, 56, 56, 56, 54, 54, 54, 54, 54, 54, 54, 54, 56, 56, 56, 56, 56, 56, 56, 56, 55, 55, 55, 55, 55, 55, 55, 55, 57, 57, 57, 57, 57, 57, 57, 57, 55, 55, 55, 55, 55, 55, 55, 55, 57, 57, 57, 57, 57, 57, 57, 57, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 50, 50, 50, 50, 50, 50, 50, 50, 53, 53, 53, 53, 53, 53, 53, 53, 50, 50, 50, 50, 50, 50, 50, 50, 53, 53, 53, 53, 53, 53, 53, 53, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 30, 30, 30, 30, 30, 30, 30, 30, 33, 33, 33, 33, 33, 33, 33, 33, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 46, 46, 46, 46, 46, 46, 46, 46, 49, 49, 49, 49, 49, 49, 49, 49, 46, 46, 46, 46, 46, 46, 46, 46, 49, 49, 49, 49, 49, 49, 49, 49, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 44, 44, 0, 0, 0, 0, 2, 5, 5, 21, 20, 20, 37, 37, 36, 36, 44, 44, 0, 0, 0, 0, 2, 5, 5, 21, 20, 20, 37, 37, 36, 36, 44, 44, 0, 0, 0, 0, 2, 5, 5, 21, 20, 20, 37, 37, 36, 36, 44, 44, 0, 0, 0, 0, 2, 5, 5, 21, 20, 20, 37, 37, 36, 36, 44, 44, 0, 0, 0, 0, 2, 5, 5, 21, 20, 20, 37, 37, 36, 36, 44, 44, 0, 0, 0, 0, 2, 5, 5, 21, 20, 20, 37, 37, 36, 36, 44, 44, 0, 0, 0, 0, 2, 5, 5, 21, 20, 20, 37, 37, 36, 36, 44, 44, 0, 0, 0, 0, 2, 5, 5, 21, 20, 20, 37, 37, 36, 36, 43, 43, 1, 1, 1, 1, 3, 4, 4, 18, 19, 19, 34, 34, 35, 35, 43, 43, 1, 1, 1, 1, 3, 4, 4, 18, 19, 19, 34, 34, 35, 35, 43, 43, 1, 1, 1, 1, 3, 4, 4, 18, 19, 19, 34, 34, 35, 35, 43, 43, 1, 1, 1, 1, 3, 4, 4, 18, 19, 19, 34, 34, 35, 35, 43, 43, 1, 1, 1, 1, 3, 4, 4, 18, 19, 19, 34, 34, 35, 35, 43, 43, 1, 1, 1, 1, 3, 4, 4, 18, 19, 19, 34, 34, 35, 35, 43, 43, 1, 1, 1, 1, 3, 4, 4, 18, 19, 19, 34, 34, 35, 35, 43, 43, 1, 1, 1, 1, 3, 4, 4, 18, 19, 19, 34, 34, 35, 35, 40, 40, 41, 41, 24, 24, 25, 9, 9, 7, 59, 59, 61, 61, 48, 48, 40, 40, 41, 41, 24, 24, 25, 9, 9, 7, 59, 59, 61, 61, 48, 48, 40, 40, 41, 41, 24, 24, 25, 9, 9, 7, 59, 59, 61, 61, 48, 48, 40, 40, 41, 41, 24, 24, 25, 9, 9, 7, 59, 59, 61, 61, 48, 48, 40, 40, 41, 41, 24, 24, 25, 9, 9, 7, 59, 59, 61, 61, 48, 48, 40, 40, 41, 41, 24, 24, 25, 9, 9, 7, 59, 59, 61, 61, 48, 48, 40, 40, 41, 41, 24, 24, 25, 9, 9, 7, 59, 59, 61, 61, 48, 48, 40, 40, 41, 41, 24, 24, 25, 9, 9, 7, 59, 59, 61, 61, 48, 48, 39, 39, 38, 38, 23, 23, 22, 8, 8, 6, 58, 58, 60, 60, 47, 47, 39, 39, 38, 38, 23, 23, 22, 8, 8, 6, 58, 58, 60, 60, 47, 47, 39, 39, 38, 38, 23, 23, 22, 8, 8, 6, 58, 58, 60, 60, 47, 47, 39, 39, 38, 38, 23, 23, 22, 8, 8, 6, 58, 58, 60, 60, 47, 47, 39, 39, 38, 38, 23, 23, 22, 8, 8, 6, 58, 58, 60, 60, 47, 47, 39, 39, 38, 38, 23, 23, 22, 8, 8, 6, 58, 58, 60, 60, 47, 47, 39, 39, 38, 38, 23, 23, 22, 8, 8, 6, 58, 58, 60, 60, 47, 47, 39, 39, 38, 38, 23, 23, 22, 8, 8, 6, 58, 58, 60, 60, 47, 47, 39, 39, 55, 55, 54, 54, 14, 15, 15, 26, 27, 27, 42, 42, 43, 43, 39, 39, 39, 55, 55, 54, 14, 15, 15, 26, 27, 42, 42, 43, 43, 43, 38, 39, 39, 55, 55, 54, 14, 15, 15, 26, 27, 42, 42, 43, 43, 1, 38, 38, 38, 39, 55, 55, 54, 14, 26, 27, 42, 42, 43, 1, 1, 1, 23, 38, 38, 38, 39, 55, 54, 14, 26, 27, 42, 43, 1, 1, 1, 1, 23, 23, 23, 38, 38, 39, 55, 14, 26, 42, 43, 1, 1, 1, 1, 1, 22, 22, 22, 23, 23, 38, 39, 54, 27, 43, 1, 1, 1, 3, 3, 3, 8, 8, 8, 22, 22, 22, 23, 39, 43, 1, 3, 3, 3, 4, 4, 4, 8, 8, 8, 6, 6, 6, 58, 47, 35, 19, 18, 18, 18, 4, 4, 4, 6, 6, 6, 58, 58, 60, 47, 31, 51, 35, 34, 19, 19, 18, 18, 18, 58, 58, 58, 60, 60, 47, 46, 30, 10, 50, 35, 34, 34, 19, 19, 19, 58, 60, 60, 60, 47, 46, 31, 30, 10, 51, 50, 35, 34, 34, 34, 19, 60, 60, 60, 47, 46, 46, 31, 30, 10, 51, 50, 50, 35, 34, 34, 34, 60, 47, 47, 46, 46, 31, 30, 11, 11, 10, 51, 50, 50, 35, 35, 34, 47, 47, 47, 46, 46, 31, 30, 11, 11, 10, 51, 50, 50, 35, 35, 35, 47, 47, 46, 46, 31, 31, 30, 11, 11, 10, 51, 51, 50, 50, 35, 35, 40, 40, 57, 57, 56, 56, 17, 16, 16, 29, 28, 28, 45, 45, 44, 44, 40, 40, 40, 57, 57, 56, 17, 16, 16, 29, 28, 45, 45, 44, 44, 44, 41, 40, 40, 57, 57, 56, 17, 16, 16, 29, 28, 45, 45, 44, 44, 0, 41, 41, 41, 40, 57, 57, 56, 17, 29, 28, 45, 45, 44, 0, 0, 0, 24, 41, 41, 41, 40, 57, 56, 17, 29, 28, 45, 44, 0, 0, 0, 0, 24, 24, 24, 41, 41, 40, 57, 17, 29, 45, 44, 0, 0, 0, 0, 0, 25, 25, 25, 24, 24, 41, 40, 56, 28, 44, 0, 0, 0, 2, 2, 2, 9, 9, 9, 25, 25, 25, 24, 40, 44, 0, 2, 2, 2, 5, 5, 5, 9, 9, 9, 7, 7, 7, 59, 48, 36, 20, 21, 21, 21, 5, 5, 5, 7, 7, 7, 59, 59, 61, 48, 32, 52, 36, 37, 20, 20, 21, 21, 21, 59, 59, 59, 61, 61, 48, 49, 33, 12, 53, 36, 37, 37, 20, 20, 20, 59, 61, 61, 61, 48, 49, 32, 33, 12, 52, 53, 36, 37, 37, 37, 20, 61, 61, 61, 48, 49, 49, 32, 33, 12, 52, 53, 53, 36, 37, 37, 37, 61, 48, 48, 49, 49, 32, 33, 13, 13, 12, 52, 53, 53, 36, 36, 37, 48, 48, 48, 49, 49, 32, 33, 13, 13, 12, 52, 53, 53, 36, 36, 36, 48, 48, 49, 49, 32, 32, 33, 13, 13, 12, 52, 52, 53, 53, 36, 36, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 47, 47, 47, 47, 47, 47, 47, 47, 49, 49, 49, 49, 49, 49, 49, 49, 46, 46, 46, 46, 46, 46, 46, 46, 49, 49, 49, 49, 49, 49, 49, 49, 46, 46, 46, 46, 46, 46, 46, 46, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 31, 31, 31, 31, 31, 31, 31, 31, 33, 33, 33, 33, 33, 33, 33, 33, 30, 30, 30, 30, 30, 30, 30, 30, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 10, 10, 10, 10, 10, 10, 52, 52, 52, 52, 52, 52, 52, 52, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 51, 51, 51, 51, 51, 51, 51, 51, 53, 53, 53, 53, 53, 53, 53, 53, 50, 50, 50, 50, 50, 50, 50, 50, 53, 53, 53, 53, 53, 53, 53, 53, 50, 50, 50, 50, 50, 50, 50, 50, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35, 35, 35, 35, 35, 35, 35, 40, 40, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 39, 39, 39, 57, 57, 57, 57, 57, 57, 57, 57, 55, 55, 55, 55, 55, 55, 55, 55, 57, 57, 57, 57, 57, 57, 57, 57, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 54, 54, 54, 54, 54, 54, 54, 54, 56, 56, 56, 56, 56, 56, 56, 56, 54, 54, 54, 54, 54, 54, 54, 54, 17, 17, 17, 17, 17, 17, 17, 17, 14, 14, 14, 14, 14, 14, 14, 14, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 15, 15, 15, 29, 29, 29, 29, 29, 29, 29, 29, 26, 26, 26, 26, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, 27, 27, 27, 45, 45, 45, 45, 45, 45, 45, 45, 42, 42, 42, 42, 42, 42, 42, 42, 45, 45, 45, 45, 45, 45, 45, 45, 42, 42, 42, 42, 42, 42, 42, 42, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 43, 43, 73, 67, 69, 1, 86, 65, 76, 69, 2, 0, 0, 0, 62, 0, 0, 0, 186, 0, 0, 0, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 44, 1, 3, 0, 43, 3, 5, 0, 4, 2, 1, 18, 5, 3, 2, 4, 21, 8, 7, 58, 6, 9, 59, 22, 9, 6, 7, 8, 25, 11, 12, 51, 30, 13, 10, 52, 10, 13, 12, 11, 33, 15, 17, 54, 26, 16, 14, 17, 15, 29, 56, 14, 16, 19, 21, 4, 34, 20, 18, 21, 19, 37, 5, 18, 20, 23, 25, 8, 38, 24, 22, 25, 23, 41, 9, 22, 24, 27, 29, 15, 42, 28, 26, 29, 27, 45, 16, 26, 28, 31, 33, 11, 46, 32, 30, 33, 31, 49, 13, 30, 32, 35, 37, 19, 50, 36, 34, 37, 35, 53, 20, 34, 36, 39, 41, 23, 55, 40, 38, 41, 39, 57, 24, 38, 40, 43, 45, 27, 1, 44, 42, 45, 43, 0, 28, 42, 44, 47, 49, 31, 60, 48, 46, 49, 47, 61, 32, 46, 48, 51, 53, 35, 10, 52, 50, 53, 51, 12, 36, 50, 52, 14, 56, 55, 54, 57, 39, 57, 54, 17, 40, 55, 56, 6, 59, 60, 7, 61, 58, 58, 61, 47, 48, 60, 59, 0, 0, 128, 191, 90, 236, 70, 66, 47, 87, 13, 66, 2, 0, 72, 66, 47, 87, 13, 66]
            point3f[] points = [(50, -50, 0), (49.03926, -50, 9.754517), (46.193974, -50, 19.13417), (41.57348, -50, 27.778513), (35.35534, -50, 35.35534), (27.778513, -50, 41.57348), (19.13417, -50, 46.193974), (9.754517, -50, 49.03926), (3.061617e-15, -50, 50), (-9.754517, -50, 49.03926), (-19.13417, -50, 46.193974), (-27.778513, -50, 41.57348), (-35.35534, -50, 35.35534), (-41.57348, -50, 27.778513), (-46.193974, -50, 19.13417), (-49.03926, -50, 9.754517), (-50, -50, 6.123234e-15), (-49.03926, -50, -9.754517), (-46.193974, -50, -19.13417), (-41.57348, -50, -27.778513), (-35.35534, -50, -35.35534), (-27.778513, -50, -41.57348), (-19.13417, -50, -46.193974), (-9.754517, -50, -49.03926), (-9.184851e-15, -50, -50), (9.754517, -50, -49.03926), (19.13417, -50, -46.193974), (27.778513, -50, -41.57348), (35.35534, -50, -35.35534), (41.57348, -50, -27.778513), (46.193974, -50, -19.13417), (49.03926, -50, -9.754517), (50, 50, 0), (49.03926, 50, 9.754517), (46.193974, 50, 19.13417), (41.57348, 50, 27.778513), (35.35534, 50, 35.35534), (27.778513, 50, 41.57348), (19.13417, 50, 46.193974), (9.754517, 50, 49.03926), (3.061617e-15, 50, 50), (-9.754517, 50, 49.03926), (-19.13417, 50, 46.193974), (-27.778513, 50, 41.57348), (-35.35534, 50, 35.35534), (-41.57348, 50, 27.778513), (-46.193974, 50, 19.13417), (-49.03926, 50, 9.754517), (-50, 50, 6.123234e-15), (-49.03926, 50, -9.754517), (-46.193974, 50, -19.13417), (-41.57348, 50, -27.778513), (-35.35534, 50, -35.35534), (-27.778513, 50, -41.57348), (-19.13417, 50, -46.193974), (-9.754517, 50, -49.03926), (-9.184851e-15, 50, -50), (9.754517, 50, -49.03926), (19.13417, 50, -46.193974), (27.778513, 50, -41.57348), (35.35534, 50, -35.35534), (41.57348, 50, -27.778513), (46.193974, 50, -19.13417), (49.03926, 50, -9.754517), (0, -50, 0), (0, 50, 0)]
            float2[] primvars:st = [(0, 0), (0, 1), (0.03125, 1), (0.03125, 0), (0.03125, 0), (0.03125, 1), (0.0625, 1), (0.0625, 0), (0.0625, 0), (0.0625, 1), (0.09375, 1), (0.09375, 0), (0.09375, 0), (0.09375, 1), (0.125, 1), (0.125, 0), (0.125, 0), (0.125, 1), (0.15625, 1), (0.15625, 0), (0.15625, 0), (0.15625, 1), (0.1875, 1), (0.1875, 0), (0.1875, 0), (0.1875, 1), (0.21875, 1), (0.21875, 0), (0.21875, 0), (0.21875, 1), (0.25, 1), (0.25, 0), (0.25, 0), (0.25, 1), (0.28125, 1), (0.28125, 0), (0.28125, 0), (0.28125, 1), (0.3125, 1), (0.3125, 0), (0.3125, 0), (0.3125, 1), (0.34375, 1), (0.34375, 0), (0.34375, 0), (0.34375, 1), (0.375, 1), (0.375, 0), (0.375, 0), (0.375, 1), (0.40625, 1), (0.40625, 0), (0.40625, 0), (0.40625, 1), (0.4375, 1), (0.4375, 0), (0.4375, 0), (0.4375, 1), (0.46875, 1), (0.46875, 0), (0.46875, 0), (0.46875, 1), (0.5, 1), (0.5, 0), (0.5, 0), (0.5, 1), (0.53125, 1), (0.53125, 0), (0.53125, 0), (0.53125, 1), (0.5625, 1), (0.5625, 0), (0.5625, 0), (0.5625, 1), (0.59375, 1), (0.59375, 0), (0.59375, 0), (0.59375, 1), (0.625, 1), (0.625, 0), (0.625, 0), (0.625, 1), (0.65625, 1), (0.65625, 0), (0.65625, 0), (0.65625, 1), (0.6875, 1), (0.6875, 0), (0.6875, 0), (0.6875, 1), (0.71875, 1), (0.71875, 0), (0.71875, 0), (0.71875, 1), (0.75, 1), (0.75, 0), (0.75, 0), (0.75, 1), (0.78125, 1), (0.78125, 0), (0.78125, 0), (0.78125, 1), (0.8125, 1), (0.8125, 0), (0.8125, 0), (0.8125, 1), (0.84375, 1), (0.84375, 0), (0.84375, 0), (0.84375, 1), (0.875, 1), (0.875, 0), (0.875, 0), (0.875, 1), (0.90625, 1), (0.90625, 0), (0.90625, 0), (0.90625, 1), (0.9375, 1), (0.9375, 0), (0.9375, 0), (0.9375, 1), (0.96875, 1), (0.96875, 0), (0.96875, 0), (0.96875, 1), (1, 1), (1, 0), (1, 0), (0.96875, 0), (1, 1), (0.96875, 0), (0.9375, 0), (0.96875, 1), (0.9375, 0), (0.90625, 0), (0.9375, 1), (0.90625, 0), (0.875, 0), (0.90625, 1), (0.875, 0), (0.84375, 0), (0.875, 1), (0.84375, 0), (0.8125, 0), (0.84375, 1), (0.8125, 0), (0.78125, 0), (0.8125, 1), (0.78125, 0), (0.75, 0), (0.78125, 1), (0.75, 0), (0.71875, 0), (0.75, 1), (0.71875, 0), (0.6875, 0), (0.71875, 1), (0.6875, 0), (0.65625, 0), (0.6875, 1), (0.65625, 0), (0.625, 0), (0.65625, 1), (0.625, 0), (0.59375, 0), (0.625, 1), (0.59375, 0), (0.5625, 0), (0.59375, 1), (0.5625, 0), (0.53125, 0), (0.5625, 1), (0.53125, 0), (0.5, 0), (0.53125, 1), (0.5, 0), (0.46875, 0), (0.5, 1), (0.46875, 0), (0.4375, 0), (0.46875, 1), (0.4375, 0), (0.40625, 0), (0.4375, 1), (0.40625, 0), (0.375, 0), (0.40625, 1), (0.375, 0), (0.34375, 0), (0.375, 1), (0.34375, 0), (0.3125, 0), (0.34375, 1), (0.3125, 0), (0.28125, 0), (0.3125, 1), (0.28125, 0), (0.25, 0), (0.28125, 1), (0.25, 0), (0.21875, 0), (0.25, 1), (0.21875, 0), (0.1875, 0), (0.21875, 1), (0.1875, 0), (0.15625, 0), (0.1875, 1), (0.15625, 0), (0.125, 0), (0.15625, 1), (0.125, 0), (0.09375, 0), (0.125, 1), (0.09375, 0), (0.0625, 0), (0.09375, 1), (0.0625, 0), (0.03125, 0), (0.0625, 1), (0.03125, 0), (0, 0), (0.03125, 1), (1, 0), (0.96875, 0), (1, 1), (0.96875, 0), (0.9375, 0), (0.96875, 1), (0.9375, 0), (0.90625, 0), (0.9375, 1), (0.90625, 0), (0.875, 0), (0.90625, 1), (0.875, 0), (0.84375, 0), (0.875, 1), (0.84375, 0), (0.8125, 0), (0.84375, 1), (0.8125, 0), (0.78125, 0), (0.8125, 1), (0.78125, 0), (0.75, 0), (0.78125, 1), (0.75, 0), (0.71875, 0), (0.75, 1), (0.71875, 0), (0.6875, 0), (0.71875, 1), (0.6875, 0), (0.65625, 0), (0.6875, 1), (0.65625, 0), (0.625, 0), (0.65625, 1), (0.625, 0), (0.59375, 0), (0.625, 1), (0.59375, 0), (0.5625, 0), (0.59375, 1), (0.5625, 0), (0.53125, 0), (0.5625, 1), (0.53125, 0), (0.5, 0), (0.53125, 1), (0.5, 0), (0.46875, 0), (0.5, 1), (0.46875, 0), (0.4375, 0), (0.46875, 1), (0.4375, 0), (0.40625, 0), (0.4375, 1), (0.40625, 0), (0.375, 0), (0.40625, 1), (0.375, 0), (0.34375, 0), (0.375, 1), (0.34375, 0), (0.3125, 0), (0.34375, 1), (0.3125, 0), (0.28125, 0), (0.3125, 1), (0.28125, 0), (0.25, 0), (0.28125, 1), (0.25, 0), (0.21875, 0), (0.25, 1), (0.21875, 0), (0.1875, 0), (0.21875, 1), (0.1875, 0), (0.15625, 0), (0.1875, 1), (0.15625, 0), (0.125, 0), (0.15625, 1), (0.125, 0), (0.09375, 0), (0.125, 1), (0.09375, 0), (0.0625, 0), (0.09375, 1), (0.0625, 0), (0.03125, 0), (0.0625, 1), (0.03125, 0), (0, 0), (0.03125, 1)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (0, 0, 90)
            double3 xformOp:scale = (1.4591853618621826, 2.696913957595825, 0.03486289456486702)
            double3 xformOp:translate = (1.985526444749947, -13.498455573199863, 20.233157686131374)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Mesh "LegBar" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI"]
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 32, 33, 1, 1, 33, 34, 2, 2, 34, 35, 3, 3, 35, 36, 4, 4, 36, 37, 5, 5, 37, 38, 6, 6, 38, 39, 7, 7, 39, 40, 8, 8, 40, 41, 9, 9, 41, 42, 10, 10, 42, 43, 11, 11, 43, 44, 12, 12, 44, 45, 13, 13, 45, 46, 14, 14, 46, 47, 15, 15, 47, 48, 16, 16, 48, 49, 17, 17, 49, 50, 18, 18, 50, 51, 19, 19, 51, 52, 20, 20, 52, 53, 21, 21, 53, 54, 22, 22, 54, 55, 23, 23, 55, 56, 24, 24, 56, 57, 25, 25, 57, 58, 26, 26, 58, 59, 27, 27, 59, 60, 28, 28, 60, 61, 29, 29, 61, 62, 30, 30, 62, 63, 31, 31, 63, 32, 0, 0, 1, 64, 1, 2, 64, 2, 3, 64, 3, 4, 64, 4, 5, 64, 5, 6, 64, 6, 7, 64, 7, 8, 64, 8, 9, 64, 9, 10, 64, 10, 11, 64, 11, 12, 64, 12, 13, 64, 13, 14, 64, 14, 15, 64, 15, 16, 64, 16, 17, 64, 17, 18, 64, 18, 19, 64, 19, 20, 64, 20, 21, 64, 21, 22, 64, 22, 23, 64, 23, 24, 64, 24, 25, 64, 25, 26, 64, 26, 27, 64, 27, 28, 64, 28, 29, 64, 29, 30, 64, 30, 31, 64, 31, 0, 64, 32, 65, 33, 33, 65, 34, 34, 65, 35, 35, 65, 36, 36, 65, 37, 37, 65, 38, 38, 65, 39, 39, 65, 40, 40, 65, 41, 41, 65, 42, 42, 65, 43, 43, 65, 44, 44, 65, 45, 45, 65, 46, 46, 65, 47, 47, 65, 48, 48, 65, 49, 49, 65, 50, 50, 65, 51, 51, 65, 52, 52, 65, 53, 53, 65, 54, 54, 65, 55, 55, 65, 56, 56, 65, 57, 57, 65, 58, 58, 65, 59, 59, 65, 60, 60, 65, 61, 61, 65, 62, 62, 65, 63, 63, 65, 32]
            rel material:binding = </World/Looks/Ash> (
                bindMaterialAs = "weakerThanDescendants"
            )
            normal3f[] normals = [(50, 0, 0), (50, 0, 0), (49.03926, 0, 9.754517), (49.03926, 0, 9.754517), (49.03926, 0, 9.754517), (49.03926, 0, 9.754517), (46.193974, 0, 19.13417), (46.193974, 0, 19.13417), (46.193974, 0, 19.13417), (46.193974, 0, 19.13417), (41.57348, 0, 27.778513), (41.57348, 0, 27.778513), (41.57348, 0, 27.778513), (41.57348, 0, 27.778513), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (35.35534, 0, 35.35534), (27.778513, 0, 41.57348), (27.778513, 0, 41.57348), (27.778513, 0, 41.57348), (27.778513, 0, 41.57348), (19.13417, 0, 46.193974), (19.13417, 0, 46.193974), (19.13417, 0, 46.193974), (19.13417, 0, 46.193974), (9.754517, 0, 49.03926), (9.754517, 0, 49.03926), (9.754517, 0, 49.03926), (9.754517, 0, 49.03926), (3.061617e-15, 0, 50), (3.061617e-15, 0, 50), (3.061617e-15, 0, 50), (3.061617e-15, 0, 50), (-9.754517, 0, 49.03926), (-9.754517, 0, 49.03926), (-9.754517, 0, 49.03926), (-9.754517, 0, 49.03926), (-19.13417, 0, 46.193974), (-19.13417, 0, 46.193974), (-19.13417, 0, 46.193974), (-19.13417, 0, 46.193974), (-27.778513, 0, 41.57348), (-27.778513, 0, 41.57348), (-27.778513, 0, 41.57348), (-27.778513, 0, 41.57348), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-35.35534, 0, 35.35534), (-41.57348, 0, 27.778513), (-41.57348, 0, 27.778513), (-41.57348, 0, 27.778513), (-41.57348, 0, 27.778513), (-46.193974, 0, 19.13417), (-46.193974, 0, 19.13417), (-46.193974, 0, 19.13417), (-46.193974, 0, 19.13417), (-49.03926, 0, 9.754517), (-49.03926, 0, 9.754517), (-49.03926, 0, 9.754517), (-49.03926, 0, 9.754517), (-50, 0, 6.123234e-15), (-50, 0, 6.123234e-15), (-50, 0, 6.123234e-15), (-50, 0, 6.123234e-15), (-49.03926, 0, -9.754517), (-49.03926, 0, -9.754517), (-49.03926, 0, -9.754517), (-49.03926, 0, -9.754517), (-46.193974, 0, -19.13417), (-46.193974, 0, -19.13417), (-46.193974, 0, -19.13417), (-46.193974, 0, -19.13417), (-41.57348, 0, -27.778513), (-41.57348, 0, -27.778513), (-41.57348, 0, -27.778513), (-41.57348, 0, -27.778513), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-35.35534, 0, -35.35534), (-27.778513, 0, -41.57348), (-27.778513, 0, -41.57348), (-27.778513, 0, -41.57348), (-27.778513, 0, -41.57348), (-19.13417, 0, -46.193974), (-19.13417, 0, -46.193974), (-19.13417, 0, -46.193974), (-19.13417, 0, -46.193974), (-9.754517, 0, -49.03926), (-9.754517, 0, -49.03926), (-9.754517, 0, -49.03926), (-9.754517, 0, -49.03926), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (-9.184851e-15, 0, -50), (9.754517, 0, -49.03926), (9.754517, 0, -49.03926), (9.754517, 0, -49.03926), (9.754517, 0, -49.03926), (19.13417, 0, -46.193974), (19.13417, 0, -46.193974), (19.13417, 0, -46.193974), (19.13417, 0, -46.193974), (27.778513, 0, -41.57348), (27.778513, 0, -41.57348), (27.778513, 0, -41.57348), (27.778513, 0, -41.57348), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (35.35534, 0, -35.35534), (41.57348, 0, -27.778513), (41.57348, 0, -27.778513), (41.57348, 0, -27.778513), (41.57348, 0, -27.778513), (46.193974, 0, -19.13417), (46.193974, 0, -19.13417), (46.193974, 0, -19.13417), (46.193974, 0, -19.13417), (49.03926, 0, -9.754517), (49.03926, 0, -9.754517), (49.03926, 0, -9.754517), (49.03926, 0, -9.754517), (50, 0, 0), (50, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 0
            point3f[] points = [(50, -50, 0), (49.03926, -50, 9.754517), (46.193974, -50, 19.13417), (41.57348, -50, 27.778513), (35.35534, -50, 35.35534), (27.778513, -50, 41.57348), (19.13417, -50, 46.193974), (9.754517, -50, 49.03926), (3.061617e-15, -50, 50), (-9.754517, -50, 49.03926), (-19.13417, -50, 46.193974), (-27.778513, -50, 41.57348), (-35.35534, -50, 35.35534), (-41.57348, -50, 27.778513), (-46.193974, -50, 19.13417), (-49.03926, -50, 9.754517), (-50, -50, 6.123234e-15), (-49.03926, -50, -9.754517), (-46.193974, -50, -19.13417), (-41.57348, -50, -27.778513), (-35.35534, -50, -35.35534), (-27.778513, -50, -41.57348), (-19.13417, -50, -46.193974), (-9.754517, -50, -49.03926), (-9.184851e-15, -50, -50), (9.754517, -50, -49.03926), (19.13417, -50, -46.193974), (27.778513, -50, -41.57348), (35.35534, -50, -35.35534), (41.57348, -50, -27.778513), (46.193974, -50, -19.13417), (49.03926, -50, -9.754517), (50, 50, 0), (49.03926, 50, 9.754517), (46.193974, 50, 19.13417), (41.57348, 50, 27.778513), (35.35534, 50, 35.35534), (27.778513, 50, 41.57348), (19.13417, 50, 46.193974), (9.754517, 50, 49.03926), (3.061617e-15, 50, 50), (-9.754517, 50, 49.03926), (-19.13417, 50, 46.193974), (-27.778513, 50, 41.57348), (-35.35534, 50, 35.35534), (-41.57348, 50, 27.778513), (-46.193974, 50, 19.13417), (-49.03926, 50, 9.754517), (-50, 50, 6.123234e-15), (-49.03926, 50, -9.754517), (-46.193974, 50, -19.13417), (-41.57348, 50, -27.778513), (-35.35534, 50, -35.35534), (-27.778513, 50, -41.57348), (-19.13417, 50, -46.193974), (-9.754517, 50, -49.03926), (-9.184851e-15, 50, -50), (9.754517, 50, -49.03926), (19.13417, 50, -46.193974), (27.778513, 50, -41.57348), (35.35534, 50, -35.35534), (41.57348, 50, -27.778513), (46.193974, 50, -19.13417), (49.03926, 50, -9.754517), (0, -50, 0), (0, 50, 0)]
            float2[] primvars:st = [(0, 0), (0, 1), (0.03125, 1), (0.03125, 0), (0.03125, 0), (0.03125, 1), (0.0625, 1), (0.0625, 0), (0.0625, 0), (0.0625, 1), (0.09375, 1), (0.09375, 0), (0.09375, 0), (0.09375, 1), (0.125, 1), (0.125, 0), (0.125, 0), (0.125, 1), (0.15625, 1), (0.15625, 0), (0.15625, 0), (0.15625, 1), (0.1875, 1), (0.1875, 0), (0.1875, 0), (0.1875, 1), (0.21875, 1), (0.21875, 0), (0.21875, 0), (0.21875, 1), (0.25, 1), (0.25, 0), (0.25, 0), (0.25, 1), (0.28125, 1), (0.28125, 0), (0.28125, 0), (0.28125, 1), (0.3125, 1), (0.3125, 0), (0.3125, 0), (0.3125, 1), (0.34375, 1), (0.34375, 0), (0.34375, 0), (0.34375, 1), (0.375, 1), (0.375, 0), (0.375, 0), (0.375, 1), (0.40625, 1), (0.40625, 0), (0.40625, 0), (0.40625, 1), (0.4375, 1), (0.4375, 0), (0.4375, 0), (0.4375, 1), (0.46875, 1), (0.46875, 0), (0.46875, 0), (0.46875, 1), (0.5, 1), (0.5, 0), (0.5, 0), (0.5, 1), (0.53125, 1), (0.53125, 0), (0.53125, 0), (0.53125, 1), (0.5625, 1), (0.5625, 0), (0.5625, 0), (0.5625, 1), (0.59375, 1), (0.59375, 0), (0.59375, 0), (0.59375, 1), (0.625, 1), (0.625, 0), (0.625, 0), (0.625, 1), (0.65625, 1), (0.65625, 0), (0.65625, 0), (0.65625, 1), (0.6875, 1), (0.6875, 0), (0.6875, 0), (0.6875, 1), (0.71875, 1), (0.71875, 0), (0.71875, 0), (0.71875, 1), (0.75, 1), (0.75, 0), (0.75, 0), (0.75, 1), (0.78125, 1), (0.78125, 0), (0.78125, 0), (0.78125, 1), (0.8125, 1), (0.8125, 0), (0.8125, 0), (0.8125, 1), (0.84375, 1), (0.84375, 0), (0.84375, 0), (0.84375, 1), (0.875, 1), (0.875, 0), (0.875, 0), (0.875, 1), (0.90625, 1), (0.90625, 0), (0.90625, 0), (0.90625, 1), (0.9375, 1), (0.9375, 0), (0.9375, 0), (0.9375, 1), (0.96875, 1), (0.96875, 0), (0.96875, 0), (0.96875, 1), (1, 1), (1, 0), (1, 0), (0.96875, 0), (1, 1), (0.96875, 0), (0.9375, 0), (0.96875, 1), (0.9375, 0), (0.90625, 0), (0.9375, 1), (0.90625, 0), (0.875, 0), (0.90625, 1), (0.875, 0), (0.84375, 0), (0.875, 1), (0.84375, 0), (0.8125, 0), (0.84375, 1), (0.8125, 0), (0.78125, 0), (0.8125, 1), (0.78125, 0), (0.75, 0), (0.78125, 1), (0.75, 0), (0.71875, 0), (0.75, 1), (0.71875, 0), (0.6875, 0), (0.71875, 1), (0.6875, 0), (0.65625, 0), (0.6875, 1), (0.65625, 0), (0.625, 0), (0.65625, 1), (0.625, 0), (0.59375, 0), (0.625, 1), (0.59375, 0), (0.5625, 0), (0.59375, 1), (0.5625, 0), (0.53125, 0), (0.5625, 1), (0.53125, 0), (0.5, 0), (0.53125, 1), (0.5, 0), (0.46875, 0), (0.5, 1), (0.46875, 0), (0.4375, 0), (0.46875, 1), (0.4375, 0), (0.40625, 0), (0.4375, 1), (0.40625, 0), (0.375, 0), (0.40625, 1), (0.375, 0), (0.34375, 0), (0.375, 1), (0.34375, 0), (0.3125, 0), (0.34375, 1), (0.3125, 0), (0.28125, 0), (0.3125, 1), (0.28125, 0), (0.25, 0), (0.28125, 1), (0.25, 0), (0.21875, 0), (0.25, 1), (0.21875, 0), (0.1875, 0), (0.21875, 1), (0.1875, 0), (0.15625, 0), (0.1875, 1), (0.15625, 0), (0.125, 0), (0.15625, 1), (0.125, 0), (0.09375, 0), (0.125, 1), (0.09375, 0), (0.0625, 0), (0.09375, 1), (0.0625, 0), (0.03125, 0), (0.0625, 1), (0.03125, 0), (0, 0), (0.03125, 1), (1, 0), (0.96875, 0), (1, 1), (0.96875, 0), (0.9375, 0), (0.96875, 1), (0.9375, 0), (0.90625, 0), (0.9375, 1), (0.90625, 0), (0.875, 0), (0.90625, 1), (0.875, 0), (0.84375, 0), (0.875, 1), (0.84375, 0), (0.8125, 0), (0.84375, 1), (0.8125, 0), (0.78125, 0), (0.8125, 1), (0.78125, 0), (0.75, 0), (0.78125, 1), (0.75, 0), (0.71875, 0), (0.75, 1), (0.71875, 0), (0.6875, 0), (0.71875, 1), (0.6875, 0), (0.65625, 0), (0.6875, 1), (0.65625, 0), (0.625, 0), (0.65625, 1), (0.625, 0), (0.59375, 0), (0.625, 1), (0.59375, 0), (0.5625, 0), (0.59375, 1), (0.5625, 0), (0.53125, 0), (0.5625, 1), (0.53125, 0), (0.5, 0), (0.53125, 1), (0.5, 0), (0.46875, 0), (0.5, 1), (0.46875, 0), (0.4375, 0), (0.46875, 1), (0.4375, 0), (0.40625, 0), (0.4375, 1), (0.40625, 0), (0.375, 0), (0.40625, 1), (0.375, 0), (0.34375, 0), (0.375, 1), (0.34375, 0), (0.3125, 0), (0.34375, 1), (0.3125, 0), (0.28125, 0), (0.3125, 1), (0.28125, 0), (0.25, 0), (0.28125, 1), (0.25, 0), (0.21875, 0), (0.25, 1), (0.21875, 0), (0.1875, 0), (0.21875, 1), (0.1875, 0), (0.15625, 0), (0.1875, 1), (0.15625, 0), (0.125, 0), (0.15625, 1), (0.125, 0), (0.09375, 0), (0.125, 1), (0.09375, 0), (0.0625, 0), (0.09375, 1), (0.0625, 0), (0.03125, 0), (0.0625, 1), (0.03125, 0), (0, 0), (0.03125, 1)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            double3 xformOp:rotateXYZ = (0, 0, 90)
            double3 xformOp:scale = (1.4591853618621826, 1.8253000974655151, 0.03486289456486702)
            double3 xformOp:translate = (0.8839509410432689, -10.627317348003999, 13.745530410917219)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Mesh "CentralBox" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysxCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxCookedDataAPI:convexHull"]
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 4, 6, 7, 5, 4, 5, 1, 0, 6, 2, 3, 7, 4, 0, 2, 6, 5, 7, 3, 1]
            rel material:binding = </World/Looks/Ash> (
                bindMaterialAs = "weakerThanDescendants"
            )
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            uniform token physics:approximation = "convexHull"
            bool physics:collisionEnabled = 0
            uchar[] physxCookedData:convexHull:buffer = [9, 246, 194, 86, 209, 118, 151, 6, 183, 50, 113, 60, 165, 149, 47, 162, 132, 78, 88, 83, 1, 67, 86, 88, 77, 14, 0, 0, 0, 0, 0, 0, 0, 73, 67, 69, 1, 67, 76, 72, 76, 9, 0, 0, 0, 8, 0, 0, 0, 12, 128, 0, 0, 6, 0, 0, 0, 24, 0, 0, 0, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 72, 194, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 72, 194, 4, 0, 4, 0, 0, 0, 128, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 194, 8, 0, 4, 0, 0, 0, 0, 0, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 72, 194, 12, 0, 4, 2, 0, 0, 128, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 194, 16, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 72, 194, 20, 0, 4, 0, 0, 1, 2, 3, 4, 5, 3, 2, 4, 2, 1, 6, 7, 6, 1, 0, 7, 0, 3, 5, 7, 5, 4, 6, 0, 3, 0, 2, 0, 1, 0, 4, 1, 5, 1, 4, 1, 2, 2, 3, 2, 5, 3, 5, 3, 4, 4, 5, 0, 3, 4, 0, 2, 3, 0, 1, 2, 0, 1, 4, 1, 2, 5, 1, 4, 5, 2, 3, 5, 3, 4, 5, 0, 0, 1, 0, 1, 0, 2, 0, 2, 0, 3, 0, 3, 0, 0, 0, 4, 0, 5, 0, 5, 0, 3, 0, 2, 0, 4, 0, 1, 0, 6, 0, 6, 0, 4, 0, 7, 0, 6, 0, 0, 0, 7, 0, 5, 0, 7, 0, 0, 0, 0, 0, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 194, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 36, 116, 73, 161, 174, 198, 78, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 161, 174, 198, 78, 0, 0, 0, 128, 0, 0, 0, 128, 0, 0, 0, 128, 161, 174, 198, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66, 0, 0, 72, 66]
            point3f[] points = [(-50, -50, 50), (50, -50, 50), (-50, 50, 50), (50, 50, 50), (-50, -50, -50), (50, -50, -50), (-50, 50, -50), (50, 50, -50)]
            bool primvars:doNotCastShadows = 0
            float2[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (0, 1), (1, 1), (1, 0), (0, 0), (1, 0), (1, 1), (0, 1), (1, 0), (0, 0), (0, 1), (1, 1)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            token visibility = "inherited"
            double3 xformOp:rotateXYZ = (0, 0, 0)
            double3 xformOp:scale = (1, 0.9999999403953552, 1)
            double3 xformOp:translate = (0, 9.094947017729282e-13, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }

    def Xform "R_Leg" (
        instanceable = false
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, -84)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-30.000000000000348, 184.44799369606423, 78.00000000000227)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Capsule "Link0" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-396.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsFixedJoint "FixedJoint"
            {
                rel physics:body0 = </World/Controller/LegBar>
                rel physics:body1 = </World/R_Leg/Link0>
                float physics:breakForce = inf
                float physics:breakTorque = inf
                point3f physics:localPos0 = (-47.92976, 46.536797, -7.7015142)
                point3f physics:localPos1 = (-5.318216, 0.000008656007, 0)
                quatf physics:localRot0 = (-0.052335933, 0, 0, 0.9986295)
                quatf physics:localRot1 = (1, 0, 0, -2.285209e-8)
            }
        }

        def Capsule "Link1" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-383.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link0>
                rel physics:body1 = </World/R_Leg/Link1>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link2" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-370.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link1>
                rel physics:body1 = </World/R_Leg/Link2>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link3" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-357.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link2>
                rel physics:body1 = </World/R_Leg/Link3>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link4" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-344.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link3>
                rel physics:body1 = </World/R_Leg/Link4>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link5" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-331.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link4>
                rel physics:body1 = </World/R_Leg/Link5>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link6" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-318.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link5>
                rel physics:body1 = </World/R_Leg/Link6>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link7" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-305.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link6>
                rel physics:body1 = </World/R_Leg/Link7>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link8" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-292.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link7>
                rel physics:body1 = </World/R_Leg/Link8>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link9" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-279.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link8>
                rel physics:body1 = </World/R_Leg/Link9>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link10" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-266.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link9>
                rel physics:body1 = </World/R_Leg/Link10>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link11" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-253.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link10>
                rel physics:body1 = </World/R_Leg/Link11>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link12" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-240.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link11>
                rel physics:body1 = </World/R_Leg/Link12>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link13" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-227.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link12>
                rel physics:body1 = </World/R_Leg/Link13>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link14" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-214.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link13>
                rel physics:body1 = </World/R_Leg/Link14>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link15" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-201.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link14>
                rel physics:body1 = </World/R_Leg/Link15>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link16" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-188.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link15>
                rel physics:body1 = </World/R_Leg/Link16>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link17" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-175.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link16>
                rel physics:body1 = </World/R_Leg/Link17>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link18" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-162.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link17>
                rel physics:body1 = </World/R_Leg/Link18>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link19" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-149.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link18>
                rel physics:body1 = </World/R_Leg/Link19>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link20" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-136.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link19>
                rel physics:body1 = </World/R_Leg/Link20>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link21" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-123.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link20>
                rel physics:body1 = </World/R_Leg/Link21>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link22" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-110.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link21>
                rel physics:body1 = </World/R_Leg/Link22>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link23" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-97.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link22>
                rel physics:body1 = </World/R_Leg/Link23>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link24" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-84.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link23>
                rel physics:body1 = </World/R_Leg/Link24>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link25" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-71.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link24>
                rel physics:body1 = </World/R_Leg/Link25>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link26" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-58.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link25>
                rel physics:body1 = </World/R_Leg/Link26>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link27" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-45.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link26>
                rel physics:body1 = </World/R_Leg/Link27>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link28" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-32.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link27>
                rel physics:body1 = </World/R_Leg/Link28>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link29" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-19.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link28>
                rel physics:body1 = </World/R_Leg/Link29>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link30" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (-6.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link29>
                rel physics:body1 = </World/R_Leg/Link30>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link31" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (6.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link30>
                rel physics:body1 = </World/R_Leg/Link31>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link32" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (19.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link31>
                rel physics:body1 = </World/R_Leg/Link32>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link33" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (32.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link32>
                rel physics:body1 = </World/R_Leg/Link33>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link34" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (45.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link33>
                rel physics:body1 = </World/R_Leg/Link34>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link35" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (58.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link34>
                rel physics:body1 = </World/R_Leg/Link35>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link36" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (71.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link35>
                rel physics:body1 = </World/R_Leg/Link36>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link37" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (84.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link36>
                rel physics:body1 = </World/R_Leg/Link37>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link38" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (97.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link37>
                rel physics:body1 = </World/R_Leg/Link38>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }

        def Capsule "Link39" (
            apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI", "PhysxCollisionAPI", "MaterialBindingAPI", "PhysxRigidBodyAPI"]
        )
        {
            uniform token axis = "X"
            double height = 10
            rel material:binding = </World/Looks/Linen_Beige> (
                bindMaterialAs = "weakerThanDescendants"
            )
            rel material:binding:physics (
                bindMaterialAs = "weakerThanDescendants"
            )
            float physics:density = 0.00005
            float physxCollision:contactOffset = 2
            float physxCollision:restOffset = 0
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.1)]
            double radius = 2
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (110.5, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def PhysicsJoint "SphericalJoint" (
                apiSchemas = ["PhysicsLimitAPI:transX", "PhysicsLimitAPI:transY", "PhysicsLimitAPI:transZ", "PhysicsLimitAPI:rotX", "PhysicsLimitAPI:rotY", "PhysicsDriveAPI:rotY", "PhysicsLimitAPI:rotZ", "PhysicsDriveAPI:rotZ"]
            )
            {
                float drive:rotY:physics:damping = 10
                float drive:rotY:physics:stiffness = 1
                uniform token drive:rotY:physics:type = "force"
                float drive:rotZ:physics:damping = 10
                float drive:rotZ:physics:stiffness = 1
                uniform token drive:rotZ:physics:type = "force"
                float limit:rotX:physics:high = -1
                float limit:rotX:physics:low = 1
                float limit:rotY:physics:high = 110
                float limit:rotY:physics:low = -110
                float limit:rotZ:physics:high = 110
                float limit:rotZ:physics:low = -110
                float limit:transX:physics:high = -1
                float limit:transX:physics:low = 1
                float limit:transY:physics:high = -1
                float limit:transY:physics:low = 1
                float limit:transZ:physics:high = -1
                float limit:transZ:physics:low = 1
                rel physics:body0 = </World/R_Leg/Link38>
                rel physics:body1 = </World/R_Leg/Link39>
                point3f physics:localPos0 = (6, 0, 0)
                point3f physics:localPos1 = (-6, 0, 0)
                quatf physics:localRot0 = (1, 0, 0, 0)
                quatf physics:localRot1 = (1, 0, 0, 0)
            }
        }
    }

    def Scope "Looks"
    {
        def Material "Oak_Planks"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Oak_Planks/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Oak_Planks/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Oak_Planks/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Wood/Oak_Planks.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Oak_Planks"
                float inputs:ao_to_diffuse = 0.06 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "AO"
                    displayName = "AO to diffuse"
                    doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.26999998, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                bool inputs:project_uvw = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                float2 inputs:texture_scale = (10, 10) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Tiling"
                    doc = "Controls the repetition of the texture."
                    hidden = false
                )
                bool inputs:world_or_object = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = "When enabled, uses world space for projection, otherwise object space is used"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Ash"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Ash/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Ash/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Ash/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Wood/Ash.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Ash"
                float inputs:detail_texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Rotate"
                    doc = "Rotates angle of the detail texture in degrees."
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (0.005, 0.005) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Tiling"
                    doc = "Controls the repetition of the detail texture."
                    hidden = false
                )
                bool inputs:project_uvw = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Texture Rotate"
                    doc = "Rotates angle of texture in degrees."
                    hidden = false
                )
                float2 inputs:texture_scale = (0.005, 0.0052) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Tiling"
                    doc = "Controls the repetition of the texture."
                    hidden = false
                )
                bool inputs:world_or_object = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = "When enabled, uses world space for projection, otherwise object space is used"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Bamboo"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Bamboo/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Bamboo/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Bamboo/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Wood/Bamboo.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Bamboo"
                float inputs:albedo_add = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Add"
                    doc = "Adds a constant value to the diffuse color "
                    hidden = false
                )
                float inputs:albedo_brightness = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                float inputs:albedo_desaturation = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Desaturation"
                    doc = "Desaturates the diffuse color"
                    hidden = false
                )
                asset inputs:ao_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "AO"
                    displayName = "Ambient Occlusion Map"
                    doc = "The ambient occlusion texture for the material"
                    hidden = false
                )
                float inputs:ao_to_diffuse = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "AO"
                    displayName = "AO to diffuse"
                    doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                    hidden = false
                )
                float inputs:bump_factor = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Strength"
                    doc = "Strength of normal map"
                    hidden = false
                )
                float inputs:detail_bump_factor = 0.3 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float inputs:detail_texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Rotate"
                    doc = "Rotates angle of the detail texture in degrees."
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Tiling"
                    doc = "Controls the repetition of the detail texture."
                    hidden = false
                )
                float2 inputs:detail_texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Translate"
                    doc = "Controls the position of the detail texture."
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Wood/Bamboo/Bamboo_BaseColor.png@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Wood/Bamboo/Bamboo_BaseColor.png@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:emissive_color = (1, 0.1, 0.1) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                    hidden = false
                )
                asset inputs:emissive_color_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color map"
                    doc = "The emissive color texture"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_opacity = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                bool inputs:enable_ORM_texture = 1 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Enable ORM Texture"
                    doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                    hidden = false
                )
                bool inputs:flip_tangent_u = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip U Tangent"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 1 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Wood/Bamboo/Bamboo_N.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Wood/Bamboo/Bamboo_N.png@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                    hidden = false
                )
                int inputs:opacity_mode = 1 (
                    customData = {
                        int default = 1
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                    hidden = false
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                asset inputs:opacity_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                asset inputs:ORM_texture = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Wood/Bamboo/Bamboo_ORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Wood/Bamboo/Bamboo_ORM.png@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "ORM Map"
                    doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                    hidden = false
                )
                bool inputs:project_uvw = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                float inputs:specular_level = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Specular"
                    doc = "The specular level (intensity) of the material"
                    hidden = false
                )
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Texture Rotate"
                    doc = "Rotates angle of texture in degrees."
                    hidden = false
                )
                float2 inputs:texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Tiling"
                    doc = "Controls the repetition of the texture."
                    hidden = false
                )
                float2 inputs:texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Translate"
                    doc = "Controls position of texture."
                    hidden = false
                )
                int inputs:uv_space_index = 0 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "UV"
                    displayName = "UV Space Index"
                    doc = "UV Space Index."
                    hidden = false
                )
                bool inputs:world_or_object = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = "When enabled, uses world space for projection, otherwise object space is used"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Linen_Beige"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Linen_Beige/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Linen_Beige/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Linen_Beige/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Textiles/Linen_Beige.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "Linen_Beige"
                float inputs:albedo_add = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Add"
                    doc = "Adds a constant value to the diffuse color "
                    hidden = false
                )
                float inputs:albedo_brightness = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                float inputs:albedo_desaturation = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Desaturation"
                    doc = "Desaturates the diffuse color"
                    hidden = false
                )
                asset inputs:ao_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "AO"
                    displayName = "Ambient Occlusion Map"
                    doc = "The ambient occlusion texture for the material"
                    hidden = false
                )
                float inputs:ao_to_diffuse = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "AO"
                    displayName = "AO to diffuse"
                    doc = "Controls the amount of ambient occlusion multiplied against the diffuse color channel"
                    hidden = false
                )
                float inputs:bump_factor = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Strength"
                    doc = "Strength of normal map"
                    hidden = false
                )
                float inputs:detail_bump_factor = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Textiles/Linen_Beige/Linen_Beige_DN.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Textiles/Linen_Beige/Linen_Beige_DN.png@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float inputs:detail_texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Rotate"
                    doc = "Rotates angle of the detail texture in degrees."
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (1, 1) (
                    customData = {
                        float2 default = (10, 10)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Tiling"
                    doc = "Controls the repetition of the detail texture."
                    hidden = false
                )
                float2 inputs:detail_texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Translate"
                    doc = "Controls the position of the detail texture."
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Textiles/Linen_Beige/Linen_Beige_BaseColor.png@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Textiles/Linen_Beige/Linen_Beige_BaseColor.png@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (0.76061773, 0.76061773, 0.7048195) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:emissive_color = (1, 0.1, 0.1) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                    hidden = false
                )
                asset inputs:emissive_color_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color map"
                    doc = "The emissive color texture"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_opacity = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                bool inputs:enable_ORM_texture = 1 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Enable ORM Texture"
                    doc = "The ORM texture will be used to extract the Occlusion, Roughness and Metallic textures from R,G,B channels"
                    hidden = false
                )
                bool inputs:flip_tangent_u = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip U Tangent"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 1 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Textiles/Linen_Beige/Linen_Beige_N.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Textiles/Linen_Beige/Linen_Beige_N.png@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                    hidden = false
                )
                int inputs:opacity_mode = 1 (
                    customData = {
                        int default = 1
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                    hidden = false
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                asset inputs:opacity_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                asset inputs:ORM_texture = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Textiles/Linen_Beige/Linen_Beige_ORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @./Collected_humanoid_mesh_joint_linked_modeled_ropes_attached_script_scene_dual/omniverse-content-production.s3-us-west-2.amazonaws.com/Materials/Base/Textiles/Linen_Beige/Linen_Beige_ORM.png@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "ORM Map"
                    doc = "Texture that has Occlusion, Roughness and Metallic maps stored in their respective R, G and B channels"
                    hidden = false
                )
                bool inputs:project_uvw = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                float inputs:specular_level = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Specular"
                    doc = "The specular level (intensity) of the material"
                    hidden = false
                )
                float inputs:texture_rotate = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Texture Rotate"
                    doc = "Rotates angle of texture in degrees."
                    hidden = false
                )
                float2 inputs:texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Tiling"
                    doc = "Controls the repetition of the texture."
                    hidden = false
                )
                float2 inputs:texture_translate = (0, 0) (
                    customData = {
                        float2 default = (0, 0)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Translate"
                    doc = "Controls position of texture."
                    hidden = false
                )
                int inputs:uv_space_index = 0 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "UV"
                    displayName = "UV Space Index"
                    doc = "UV Space Index."
                    hidden = false
                )
                bool inputs:world_or_object = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UV"
                    displayName = "Enable World Space"
                    doc = "When enabled, uses world space for projection, otherwise object space is used"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    def Xform "PhysicsDemoSceneBase" (
        instanceable = false
    )
    {
        float3 xformOp:rotateXYZ = (-90, -178.1567, 0)
        float3 xformOp:scale = (10, 10, 10)
        double3 xformOp:translate = (-2.1875551663665316e-31, 17.067103219115538, -4.833400605306876e-30)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Scope "Looks"
        {
            def Material "OmniGlass"
            {
                token outputs:mdl:displacement.connect = </World/PhysicsDemoSceneBase/Looks/OmniGlass/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/PhysicsDemoSceneBase/Looks/OmniGlass/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/PhysicsDemoSceneBase/Looks/OmniGlass/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        def SphereLight "SphereLightRoom"
        {
            float exposure = 0.7
            float inputs:intensity = 500009.6
            float inputs:radius = 20
            float inputs:specular = 1
            token visibility = "inherited"
            double3 xformOp:translate = (30, 500, 523)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def DomeLight "DomeLightRoom"
        {
            color3f inputs:color = (0.5, 0.75, 1)
            float inputs:intensity = 150
            token visibility = "inherited"
            double3 xformOp:translate = (0, 0, -9999)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }

        def Scope "roomScene"
        {
            def Scope "colliders"
            {
                def Scope "floor" (
                    apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    def Cube "infinitePlane"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.5882353, 0.78431374, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (5000000, 5000000, 10)
                        double3 xformOp:translate = (0, 0, -92)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "mainFloorActor"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.5, 0.75, 1.25)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (720, 720, 10)
                        double3 xformOp:translate = (0, 0, -82)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }
                }

                def Scope "walls" (
                    apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    def Cube "windowSpacerActor1_0_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (95, 20, 125)
                        double3 xformOp:translate = (-262.5, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowSpacerActor1_0_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (95, 20, 125)
                        double3 xformOp:translate = (-87.5, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowSpacerActor1_0_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (95, 20, 125)
                        double3 xformOp:translate = (87.5, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowSpacerActor1_0_3"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (95, 20, 125)
                        double3 xformOp:translate = (262.5, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorBottom1_0_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (80, 40, 5)
                        double3 xformOp:translate = (-175, -330, -12)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorTop1_0_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (80, 30, 5)
                        double3 xformOp:translate = (-175, -330, 108)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorR1_0_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (5, 30, 115)
                        double3 xformOp:translate = (-212.5, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorL1_0_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (5, 30, 115)
                        double3 xformOp:translate = (-137.5, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv0_1_0_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (2, 7, 115)
                        double3 xformOp:translate = (-175, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_0_0_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (70, 7, 2)
                        double3 xformOp:translate = (-175, -330, 28.449996948242188)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_0_0_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (70, 7, 2)
                        double3 xformOp:translate = (-175, -330, 66.39999389648438)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorBottom1_0_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (80, 40, 5)
                        double3 xformOp:translate = (0, -330, -12)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorTop1_0_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (80, 30, 5)
                        double3 xformOp:translate = (0, -330, 108)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorR1_0_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (5, 30, 115)
                        double3 xformOp:translate = (-37.5, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorL1_0_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (5, 30, 115)
                        double3 xformOp:translate = (37.5, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv0_1_0_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (2, 7, 115)
                        double3 xformOp:translate = (0, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_0_1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (70, 7, 2)
                        double3 xformOp:translate = (0, -330, 28.449996948242188)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_0_1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (70, 7, 2)
                        double3 xformOp:translate = (0, -330, 66.39999389648438)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorBottom1_0_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (80, 40, 5)
                        double3 xformOp:translate = (175, -330, -12)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorTop1_0_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (80, 30, 5)
                        double3 xformOp:translate = (175, -330, 108)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorR1_0_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (5, 30, 115)
                        double3 xformOp:translate = (137.5, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorL1_0_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (5, 30, 115)
                        double3 xformOp:translate = (212.5, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv0_1_0_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (2, 7, 115)
                        double3 xformOp:translate = (175, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_0_2_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (70, 7, 2)
                        double3 xformOp:translate = (175, -330, 28.449996948242188)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_0_2_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (70, 7, 2)
                        double3 xformOp:translate = (175, -330, 66.39999389648438)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "wallActorTop1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (620, 20, 42.5)
                        double3 xformOp:translate = (0, -330, 131.75)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "wallActorBottom1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (620, 20, 42.5)
                        double3 xformOp:translate = (0, -330, -35.75)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "moldingActorBottom1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (600, 40, 20)
                        double3 xformOp:translate = (0, -330, -67)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "moldingActorTop1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (600, 40, 20)
                        double3 xformOp:translate = (0, -330, 163)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowSpacerActor1_1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (20, 95, 125)
                        double3 xformOp:translate = (-330, -262.5, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowSpacerActor1_1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (20, 95, 125)
                        double3 xformOp:translate = (-330, -87.5, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowSpacerActor1_1_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (20, 95, 125)
                        double3 xformOp:translate = (-330, 87.5, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowSpacerActor1_1_3"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (20, 95, 125)
                        double3 xformOp:translate = (-330, 262.5, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorBottom1_1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (40, 80, 5)
                        double3 xformOp:translate = (-330, -175, -12)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorTop1_1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (30, 80, 5)
                        double3 xformOp:translate = (-330, -175, 108)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorR1_1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (30, 5, 115)
                        double3 xformOp:translate = (-330, -212.5, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorL1_1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (30, 5, 115)
                        double3 xformOp:translate = (-330, -137.5, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv0_1_1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (7, 2, 115)
                        double3 xformOp:translate = (-330, -175, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_1_0_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (7, 70, 2)
                        double3 xformOp:translate = (-330, -175, 28.449996948242188)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_1_0_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (7, 70, 2)
                        double3 xformOp:translate = (-330, -175, 66.39999389648438)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorBottom1_1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (40, 80, 5)
                        double3 xformOp:translate = (-330, 0, -12)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorTop1_1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (30, 80, 5)
                        double3 xformOp:translate = (-330, 0, 108)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorR1_1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (30, 5, 115)
                        double3 xformOp:translate = (-330, -37.5, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorL1_1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (30, 5, 115)
                        double3 xformOp:translate = (-330, 37.5, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv0_1_1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (7, 2, 115)
                        double3 xformOp:translate = (-330, 0, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_1_1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (7, 70, 2)
                        double3 xformOp:translate = (-330, 0, 28.449996948242188)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_1_1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (7, 70, 2)
                        double3 xformOp:translate = (-330, 0, 66.39999389648438)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorBottom1_1_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (40, 80, 5)
                        double3 xformOp:translate = (-330, 175, -12)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorTop1_1_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (30, 80, 5)
                        double3 xformOp:translate = (-330, 175, 108)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorR1_1_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (30, 5, 115)
                        double3 xformOp:translate = (-330, 137.5, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowActorL1_1_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (30, 5, 115)
                        double3 xformOp:translate = (-330, 212.5, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv0_1_1_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (7, 2, 115)
                        double3 xformOp:translate = (-330, 175, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_1_2_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (7, 70, 2)
                        double3 xformOp:translate = (-330, 175, 28.449996948242188)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowDiv1_1_1_2_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (7, 70, 2)
                        double3 xformOp:translate = (-330, 175, 66.39999389648438)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "wallActorTop1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (20, 620, 42.5)
                        double3 xformOp:translate = (-330, 0, 131.75)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "wallActorBottom1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.53333336, 0.7490196, 0.59607846)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (20, 620, 42.5)
                        double3 xformOp:translate = (-330, 0, -35.75)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "moldingActorBottom1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (40, 600, 20)
                        double3 xformOp:translate = (-330, 0, -67)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "moldingActorTop1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (40, 600, 20)
                        double3 xformOp:translate = (-330, 0, 163)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "pillarActor0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (40, 40, 210)
                        double3 xformOp:translate = (-330, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "pillarActorMoldingBottom0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (60, 60, 20)
                        double3 xformOp:translate = (-330, -330, -67)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "pillarActorMoldingTop0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (60, 60, 20)
                        double3 xformOp:translate = (-330, -330, 163)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "pillarActor1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (40, 40, 210)
                        double3 xformOp:translate = (330, -330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "pillarActorMoldingBottom1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (60, 60, 20)
                        double3 xformOp:translate = (330, -330, -67)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "pillarActorMoldingTop1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (60, 60, 20)
                        double3 xformOp:translate = (330, -330, 163)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "pillarActor2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (40, 40, 210)
                        double3 xformOp:translate = (-330, 330, 48)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "pillarActorMoldingBottom2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (60, 60, 20)
                        double3 xformOp:translate = (-330, 330, -67)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "pillarActorMoldingTop2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(1, 1, 1)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (60, 60, 20)
                        double3 xformOp:translate = (-330, 330, 163)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }
                }

                def Scope "windows" (
                    apiSchemas = ["PhysicsCollisionAPI", "MaterialBindingAPI"]
                )
                {
                    rel material:binding = </World/PhysicsDemoSceneBase/Looks/OmniGlass> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    custom bool primvars:doNotCastShadows = 1

                    def Cube "windowGlassActor1_0_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.078431375, 0.078431375, 0.11764706)]
                        custom bool primvars:doNotCastShadows = 1
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (69.86, 4.99, 114.77)
                        double3 xformOp:translate = (-174.92999267578125, -330, 48.11499786376953)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowGlassActor1_0_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.078431375, 0.078431375, 0.11764706)]
                        custom bool primvars:doNotCastShadows = 1
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (69.86, 4.99, 114.77)
                        double3 xformOp:translate = (0.07000000029802322, -330, 48.11499786376953)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowGlassActor1_0_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.078431375, 0.078431375, 0.11764706)]
                        custom bool primvars:doNotCastShadows = 1
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (69.86, 4.99, 114.77)
                        double3 xformOp:translate = (175.07000732421875, -330, 48.11499786376953)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowGlassActor1_1_0"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.078431375, 0.078431375, 0.11764706)]
                        custom bool primvars:doNotCastShadows = 1
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (4.99, 69.86, 114.77)
                        double3 xformOp:translate = (-330, -174.92999267578125, 48.11499786376953)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowGlassActor1_1_1"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.078431375, 0.078431375, 0.11764706)]
                        custom bool primvars:doNotCastShadows = 1
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (4.99, 69.86, 114.77)
                        double3 xformOp:translate = (-330, 0.07000000029802322, 48.11499786376953)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "windowGlassActor1_1_2"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.078431375, 0.078431375, 0.11764706)]
                        custom bool primvars:doNotCastShadows = 1
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (4.99, 69.86, 114.77)
                        double3 xformOp:translate = (-330, 175.07000732421875, 48.11499786376953)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }
                }

                def Scope "table" (
                    apiSchemas = ["PhysicsCollisionAPI"]
                )
                {
                    color3f[] primvars:displayColor = [(0.11764706, 0.23529412, 1)]
                    token visibility = "invisible"

                    def Cube "tableTopActor"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.65882355, 0.5568628, 0.46666667)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (200, 100, 10)
                        double3 xformOp:translate = (0, 0, -7)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "tableLeg0Actor"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.65882355, 0.5568628, 0.46666667)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (8, 8, 65)
                        double3 xformOp:translate = (-91, -41, -44.5)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "tableLeg1Actor"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.65882355, 0.5568628, 0.46666667)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (8, 8, 65)
                        double3 xformOp:translate = (-91, 41, -44.5)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "tableLeg2Actor"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.65882355, 0.5568628, 0.46666667)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (8, 8, 65)
                        double3 xformOp:translate = (91, -41, -44.5)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }

                    def Cube "tableLeg3Actor"
                    {
                        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                        color3f[] primvars:displayColor = [(0.65882355, 0.5568628, 0.46666667)]
                        double size = 1
                        quatf xformOp:orient = (1, 0, 0, 0)
                        float3 xformOp:scale = (8, 8, 65)
                        double3 xformOp:translate = (91, 41, -44.5)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale", "xformOp:orient"]
                    }
                }
            }

            def Scope "renderables"
            {
                token visibility = "invisible"

                def Mesh "groundPlane0"
                {
                    uniform bool doubleSided = 0
                    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
                    int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647]
                    normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
                    point3f[] points = [(-360, -360, 0), (-320, -360, 0), (-320, -320, 0), (-360, -320, 0), (-280, -360, 0), (-240, -360, 0), (-240, -320, 0), (-280, -320, 0), (-200, -360, 0), (-160, -360, 0), (-160, -320, 0), (-200, -320, 0), (-120, -360, 0), (-80, -360, 0), (-80, -320, 0), (-120, -320, 0), (-40, -360, 0), (0, -360, 0), (0, -320, 0), (-40, -320, 0), (40, -360, 0), (80, -360, 0), (80, -320, 0), (40, -320, 0), (120, -360, 0), (160, -360, 0), (160, -320, 0), (120, -320, 0), (200, -360, 0), (240, -360, 0), (240, -320, 0), (200, -320, 0), (280, -360, 0), (320, -360, 0), (320, -320, 0), (280, -320, 0), (-320, -320, 0), (-280, -320, 0), (-280, -280, 0), (-320, -280, 0), (-240, -320, 0), (-200, -320, 0), (-200, -280, 0), (-240, -280, 0), (-160, -320, 0), (-120, -320, 0), (-120, -280, 0), (-160, -280, 0), (-80, -320, 0), (-40, -320, 0), (-40, -280, 0), (-80, -280, 0), (0, -320, 0), (40, -320, 0), (40, -280, 0), (0, -280, 0), (80, -320, 0), (120, -320, 0), (120, -280, 0), (80, -280, 0), (160, -320, 0), (200, -320, 0), (200, -280, 0), (160, -280, 0), (240, -320, 0), (280, -320, 0), (280, -280, 0), (240, -280, 0), (320, -320, 0), (360, -320, 0), (360, -280, 0), (320, -280, 0), (-360, -280, 0), (-320, -280, 0), (-320, -240, 0), (-360, -240, 0), (-280, -280, 0), (-240, -280, 0), (-240, -240, 0), (-280, -240, 0), (-200, -280, 0), (-160, -280, 0), (-160, -240, 0), (-200, -240, 0), (-120, -280, 0), (-80, -280, 0), (-80, -240, 0), (-120, -240, 0), (-40, -280, 0), (0, -280, 0), (0, -240, 0), (-40, -240, 0), (40, -280, 0), (80, -280, 0), (80, -240, 0), (40, -240, 0), (120, -280, 0), (160, -280, 0), (160, -240, 0), (120, -240, 0), (200, -280, 0), (240, -280, 0), (240, -240, 0), (200, -240, 0), (280, -280, 0), (320, -280, 0), (320, -240, 0), (280, -240, 0), (-320, -240, 0), (-280, -240, 0), (-280, -200, 0), (-320, -200, 0), (-240, -240, 0), (-200, -240, 0), (-200, -200, 0), (-240, -200, 0), (-160, -240, 0), (-120, -240, 0), (-120, -200, 0), (-160, -200, 0), (-80, -240, 0), (-40, -240, 0), (-40, -200, 0), (-80, -200, 0), (0, -240, 0), (40, -240, 0), (40, -200, 0), (0, -200, 0), (80, -240, 0), (120, -240, 0), (120, -200, 0), (80, -200, 0), (160, -240, 0), (200, -240, 0), (200, -200, 0), (160, -200, 0), (240, -240, 0), (280, -240, 0), (280, -200, 0), (240, -200, 0), (320, -240, 0), (360, -240, 0), (360, -200, 0), (320, -200, 0), (-360, -200, 0), (-320, -200, 0), (-320, -160, 0), (-360, -160, 0), (-280, -200, 0), (-240, -200, 0), (-240, -160, 0), (-280, -160, 0), (-200, -200, 0), (-160, -200, 0), (-160, -160, 0), (-200, -160, 0), (-120, -200, 0), (-80, -200, 0), (-80, -160, 0), (-120, -160, 0), (-40, -200, 0), (0, -200, 0), (0, -160, 0), (-40, -160, 0), (40, -200, 0), (80, -200, 0), (80, -160, 0), (40, -160, 0), (120, -200, 0), (160, -200, 0), (160, -160, 0), (120, -160, 0), (200, -200, 0), (240, -200, 0), (240, -160, 0), (200, -160, 0), (280, -200, 0), (320, -200, 0), (320, -160, 0), (280, -160, 0), (-320, -160, 0), (-280, -160, 0), (-280, -120, 0), (-320, -120, 0), (-240, -160, 0), (-200, -160, 0), (-200, -120, 0), (-240, -120, 0), (-160, -160, 0), (-120, -160, 0), (-120, -120, 0), (-160, -120, 0), (-80, -160, 0), (-40, -160, 0), (-40, -120, 0), (-80, -120, 0), (0, -160, 0), (40, -160, 0), (40, -120, 0), (0, -120, 0), (80, -160, 0), (120, -160, 0), (120, -120, 0), (80, -120, 0), (160, -160, 0), (200, -160, 0), (200, -120, 0), (160, -120, 0), (240, -160, 0), (280, -160, 0), (280, -120, 0), (240, -120, 0), (320, -160, 0), (360, -160, 0), (360, -120, 0), (320, -120, 0), (-360, -120, 0), (-320, -120, 0), (-320, -80, 0), (-360, -80, 0), (-280, -120, 0), (-240, -120, 0), (-240, -80, 0), (-280, -80, 0), (-200, -120, 0), (-160, -120, 0), (-160, -80, 0), (-200, -80, 0), (-120, -120, 0), (-80, -120, 0), (-80, -80, 0), (-120, -80, 0), (-40, -120, 0), (0, -120, 0), (0, -80, 0), (-40, -80, 0), (40, -120, 0), (80, -120, 0), (80, -80, 0), (40, -80, 0), (120, -120, 0), (160, -120, 0), (160, -80, 0), (120, -80, 0), (200, -120, 0), (240, -120, 0), (240, -80, 0), (200, -80, 0), (280, -120, 0), (320, -120, 0), (320, -80, 0), (280, -80, 0), (-320, -80, 0), (-280, -80, 0), (-280, -40, 0), (-320, -40, 0), (-240, -80, 0), (-200, -80, 0), (-200, -40, 0), (-240, -40, 0), (-160, -80, 0), (-120, -80, 0), (-120, -40, 0), (-160, -40, 0), (-80, -80, 0), (-40, -80, 0), (-40, -40, 0), (-80, -40, 0), (0, -80, 0), (40, -80, 0), (40, -40, 0), (0, -40, 0), (80, -80, 0), (120, -80, 0), (120, -40, 0), (80, -40, 0), (160, -80, 0), (200, -80, 0), (200, -40, 0), (160, -40, 0), (240, -80, 0), (280, -80, 0), (280, -40, 0), (240, -40, 0), (320, -80, 0), (360, -80, 0), (360, -40, 0), (320, -40, 0), (-360, -40, 0), (-320, -40, 0), (-320, 0, 0), (-360, 0, 0), (-280, -40, 0), (-240, -40, 0), (-240, 0, 0), (-280, 0, 0), (-200, -40, 0), (-160, -40, 0), (-160, 0, 0), (-200, 0, 0), (-120, -40, 0), (-80, -40, 0), (-80, 0, 0), (-120, 0, 0), (-40, -40, 0), (0, -40, 0), (0, 0, 0), (-40, 0, 0), (40, -40, 0), (80, -40, 0), (80, 0, 0), (40, 0, 0), (120, -40, 0), (160, -40, 0), (160, 0, 0), (120, 0, 0), (200, -40, 0), (240, -40, 0), (240, 0, 0), (200, 0, 0), (280, -40, 0), (320, -40, 0), (320, 0, 0), (280, 0, 0), (-320, 0, 0), (-280, 0, 0), (-280, 40, 0), (-320, 40, 0), (-240, 0, 0), (-200, 0, 0), (-200, 40, 0), (-240, 40, 0), (-160, 0, 0), (-120, 0, 0), (-120, 40, 0), (-160, 40, 0), (-80, 0, 0), (-40, 0, 0), (-40, 40, 0), (-80, 40, 0), (0, 0, 0), (40, 0, 0), (40, 40, 0), (0, 40, 0), (80, 0, 0), (120, 0, 0), (120, 40, 0), (80, 40, 0), (160, 0, 0), (200, 0, 0), (200, 40, 0), (160, 40, 0), (240, 0, 0), (280, 0, 0), (280, 40, 0), (240, 40, 0), (320, 0, 0), (360, 0, 0), (360, 40, 0), (320, 40, 0), (-360, 40, 0), (-320, 40, 0), (-320, 80, 0), (-360, 80, 0), (-280, 40, 0), (-240, 40, 0), (-240, 80, 0), (-280, 80, 0), (-200, 40, 0), (-160, 40, 0), (-160, 80, 0), (-200, 80, 0), (-120, 40, 0), (-80, 40, 0), (-80, 80, 0), (-120, 80, 0), (-40, 40, 0), (0, 40, 0), (0, 80, 0), (-40, 80, 0), (40, 40, 0), (80, 40, 0), (80, 80, 0), (40, 80, 0), (120, 40, 0), (160, 40, 0), (160, 80, 0), (120, 80, 0), (200, 40, 0), (240, 40, 0), (240, 80, 0), (200, 80, 0), (280, 40, 0), (320, 40, 0), (320, 80, 0), (280, 80, 0), (-320, 80, 0), (-280, 80, 0), (-280, 120, 0), (-320, 120, 0), (-240, 80, 0), (-200, 80, 0), (-200, 120, 0), (-240, 120, 0), (-160, 80, 0), (-120, 80, 0), (-120, 120, 0), (-160, 120, 0), (-80, 80, 0), (-40, 80, 0), (-40, 120, 0), (-80, 120, 0), (0, 80, 0), (40, 80, 0), (40, 120, 0), (0, 120, 0), (80, 80, 0), (120, 80, 0), (120, 120, 0), (80, 120, 0), (160, 80, 0), (200, 80, 0), (200, 120, 0), (160, 120, 0), (240, 80, 0), (280, 80, 0), (280, 120, 0), (240, 120, 0), (320, 80, 0), (360, 80, 0), (360, 120, 0), (320, 120, 0), (-360, 120, 0), (-320, 120, 0), (-320, 160, 0), (-360, 160, 0), (-280, 120, 0), (-240, 120, 0), (-240, 160, 0), (-280, 160, 0), (-200, 120, 0), (-160, 120, 0), (-160, 160, 0), (-200, 160, 0), (-120, 120, 0), (-80, 120, 0), (-80, 160, 0), (-120, 160, 0), (-40, 120, 0), (0, 120, 0), (0, 160, 0), (-40, 160, 0), (40, 120, 0), (80, 120, 0), (80, 160, 0), (40, 160, 0), (120, 120, 0), (160, 120, 0), (160, 160, 0), (120, 160, 0), (200, 120, 0), (240, 120, 0), (240, 160, 0), (200, 160, 0), (280, 120, 0), (320, 120, 0), (320, 160, 0), (280, 160, 0), (-320, 160, 0), (-280, 160, 0), (-280, 200, 0), (-320, 200, 0), (-240, 160, 0), (-200, 160, 0), (-200, 200, 0), (-240, 200, 0), (-160, 160, 0), (-120, 160, 0), (-120, 200, 0), (-160, 200, 0), (-80, 160, 0), (-40, 160, 0), (-40, 200, 0), (-80, 200, 0), (0, 160, 0), (40, 160, 0), (40, 200, 0), (0, 200, 0), (80, 160, 0), (120, 160, 0), (120, 200, 0), (80, 200, 0), (160, 160, 0), (200, 160, 0), (200, 200, 0), (160, 200, 0), (240, 160, 0), (280, 160, 0), (280, 200, 0), (240, 200, 0), (320, 160, 0), (360, 160, 0), (360, 200, 0), (320, 200, 0), (-360, 200, 0), (-320, 200, 0), (-320, 240, 0), (-360, 240, 0), (-280, 200, 0), (-240, 200, 0), (-240, 240, 0), (-280, 240, 0), (-200, 200, 0), (-160, 200, 0), (-160, 240, 0), (-200, 240, 0), (-120, 200, 0), (-80, 200, 0), (-80, 240, 0), (-120, 240, 0), (-40, 200, 0), (0, 200, 0), (0, 240, 0), (-40, 240, 0), (40, 200, 0), (80, 200, 0), (80, 240, 0), (40, 240, 0), (120, 200, 0), (160, 200, 0), (160, 240, 0), (120, 240, 0), (200, 200, 0), (240, 200, 0), (240, 240, 0), (200, 240, 0), (280, 200, 0), (320, 200, 0), (320, 240, 0), (280, 240, 0), (-320, 240, 0), (-280, 240, 0), (-280, 280, 0), (-320, 280, 0), (-240, 240, 0), (-200, 240, 0), (-200, 280, 0), (-240, 280, 0), (-160, 240, 0), (-120, 240, 0), (-120, 280, 0), (-160, 280, 0), (-80, 240, 0), (-40, 240, 0), (-40, 280, 0), (-80, 280, 0), (0, 240, 0), (40, 240, 0), (40, 280, 0), (0, 280, 0), (80, 240, 0), (120, 240, 0), (120, 280, 0), (80, 280, 0), (160, 240, 0), (200, 240, 0), (200, 280, 0), (160, 280, 0), (240, 240, 0), (280, 240, 0), (280, 280, 0), (240, 280, 0), (320, 240, 0), (360, 240, 0), (360, 280, 0), (320, 280, 0), (-360, 280, 0), (-320, 280, 0), (-320, 320, 0), (-360, 320, 0), (-280, 280, 0), (-240, 280, 0), (-240, 320, 0), (-280, 320, 0), (-200, 280, 0), (-160, 280, 0), (-160, 320, 0), (-200, 320, 0), (-120, 280, 0), (-80, 280, 0), (-80, 320, 0), (-120, 320, 0), (-40, 280, 0), (0, 280, 0), (0, 320, 0), (-40, 320, 0), (40, 280, 0), (80, 280, 0), (80, 320, 0), (40, 320, 0), (120, 280, 0), (160, 280, 0), (160, 320, 0), (120, 320, 0), (200, 280, 0), (240, 280, 0), (240, 320, 0), (200, 320, 0), (280, 280, 0), (320, 280, 0), (320, 320, 0), (280, 320, 0), (-320, 320, 0), (-280, 320, 0), (-280, 360, 0), (-320, 360, 0), (-240, 320, 0), (-200, 320, 0), (-200, 360, 0), (-240, 360, 0), (-160, 320, 0), (-120, 320, 0), (-120, 360, 0), (-160, 360, 0), (-80, 320, 0), (-40, 320, 0), (-40, 360, 0), (-80, 360, 0), (0, 320, 0), (40, 320, 0), (40, 360, 0), (0, 360, 0), (80, 320, 0), (120, 320, 0), (120, 360, 0), (80, 360, 0), (160, 320, 0), (200, 320, 0), (200, 360, 0), (160, 360, 0), (240, 320, 0), (280, 320, 0), (280, 360, 0), (240, 360, 0), (320, 320, 0), (360, 320, 0), (360, 360, 0), (320, 360, 0)]
                    color3f[] primvars:displayColor = [(0.5, 0.75, 1.25)]
                    custom bool primvars:doNotCastShadows = 1
                    uniform token purpose = "render"
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, -76.9000015258789)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Mesh "groundPlane1"
                {
                    uniform bool doubleSided = 0
                    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
                    int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647]
                    normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
                    point3f[] points = [(-320, -360, 0), (-280, -360, 0), (-280, -320, 0), (-320, -320, 0), (-240, -360, 0), (-200, -360, 0), (-200, -320, 0), (-240, -320, 0), (-160, -360, 0), (-120, -360, 0), (-120, -320, 0), (-160, -320, 0), (-80, -360, 0), (-40, -360, 0), (-40, -320, 0), (-80, -320, 0), (0, -360, 0), (40, -360, 0), (40, -320, 0), (0, -320, 0), (80, -360, 0), (120, -360, 0), (120, -320, 0), (80, -320, 0), (160, -360, 0), (200, -360, 0), (200, -320, 0), (160, -320, 0), (240, -360, 0), (280, -360, 0), (280, -320, 0), (240, -320, 0), (320, -360, 0), (360, -360, 0), (360, -320, 0), (320, -320, 0), (-360, -320, 0), (-320, -320, 0), (-320, -280, 0), (-360, -280, 0), (-280, -320, 0), (-240, -320, 0), (-240, -280, 0), (-280, -280, 0), (-200, -320, 0), (-160, -320, 0), (-160, -280, 0), (-200, -280, 0), (-120, -320, 0), (-80, -320, 0), (-80, -280, 0), (-120, -280, 0), (-40, -320, 0), (0, -320, 0), (0, -280, 0), (-40, -280, 0), (40, -320, 0), (80, -320, 0), (80, -280, 0), (40, -280, 0), (120, -320, 0), (160, -320, 0), (160, -280, 0), (120, -280, 0), (200, -320, 0), (240, -320, 0), (240, -280, 0), (200, -280, 0), (280, -320, 0), (320, -320, 0), (320, -280, 0), (280, -280, 0), (-320, -280, 0), (-280, -280, 0), (-280, -240, 0), (-320, -240, 0), (-240, -280, 0), (-200, -280, 0), (-200, -240, 0), (-240, -240, 0), (-160, -280, 0), (-120, -280, 0), (-120, -240, 0), (-160, -240, 0), (-80, -280, 0), (-40, -280, 0), (-40, -240, 0), (-80, -240, 0), (0, -280, 0), (40, -280, 0), (40, -240, 0), (0, -240, 0), (80, -280, 0), (120, -280, 0), (120, -240, 0), (80, -240, 0), (160, -280, 0), (200, -280, 0), (200, -240, 0), (160, -240, 0), (240, -280, 0), (280, -280, 0), (280, -240, 0), (240, -240, 0), (320, -280, 0), (360, -280, 0), (360, -240, 0), (320, -240, 0), (-360, -240, 0), (-320, -240, 0), (-320, -200, 0), (-360, -200, 0), (-280, -240, 0), (-240, -240, 0), (-240, -200, 0), (-280, -200, 0), (-200, -240, 0), (-160, -240, 0), (-160, -200, 0), (-200, -200, 0), (-120, -240, 0), (-80, -240, 0), (-80, -200, 0), (-120, -200, 0), (-40, -240, 0), (0, -240, 0), (0, -200, 0), (-40, -200, 0), (40, -240, 0), (80, -240, 0), (80, -200, 0), (40, -200, 0), (120, -240, 0), (160, -240, 0), (160, -200, 0), (120, -200, 0), (200, -240, 0), (240, -240, 0), (240, -200, 0), (200, -200, 0), (280, -240, 0), (320, -240, 0), (320, -200, 0), (280, -200, 0), (-320, -200, 0), (-280, -200, 0), (-280, -160, 0), (-320, -160, 0), (-240, -200, 0), (-200, -200, 0), (-200, -160, 0), (-240, -160, 0), (-160, -200, 0), (-120, -200, 0), (-120, -160, 0), (-160, -160, 0), (-80, -200, 0), (-40, -200, 0), (-40, -160, 0), (-80, -160, 0), (0, -200, 0), (40, -200, 0), (40, -160, 0), (0, -160, 0), (80, -200, 0), (120, -200, 0), (120, -160, 0), (80, -160, 0), (160, -200, 0), (200, -200, 0), (200, -160, 0), (160, -160, 0), (240, -200, 0), (280, -200, 0), (280, -160, 0), (240, -160, 0), (320, -200, 0), (360, -200, 0), (360, -160, 0), (320, -160, 0), (-360, -160, 0), (-320, -160, 0), (-320, -120, 0), (-360, -120, 0), (-280, -160, 0), (-240, -160, 0), (-240, -120, 0), (-280, -120, 0), (-200, -160, 0), (-160, -160, 0), (-160, -120, 0), (-200, -120, 0), (-120, -160, 0), (-80, -160, 0), (-80, -120, 0), (-120, -120, 0), (-40, -160, 0), (0, -160, 0), (0, -120, 0), (-40, -120, 0), (40, -160, 0), (80, -160, 0), (80, -120, 0), (40, -120, 0), (120, -160, 0), (160, -160, 0), (160, -120, 0), (120, -120, 0), (200, -160, 0), (240, -160, 0), (240, -120, 0), (200, -120, 0), (280, -160, 0), (320, -160, 0), (320, -120, 0), (280, -120, 0), (-320, -120, 0), (-280, -120, 0), (-280, -80, 0), (-320, -80, 0), (-240, -120, 0), (-200, -120, 0), (-200, -80, 0), (-240, -80, 0), (-160, -120, 0), (-120, -120, 0), (-120, -80, 0), (-160, -80, 0), (-80, -120, 0), (-40, -120, 0), (-40, -80, 0), (-80, -80, 0), (0, -120, 0), (40, -120, 0), (40, -80, 0), (0, -80, 0), (80, -120, 0), (120, -120, 0), (120, -80, 0), (80, -80, 0), (160, -120, 0), (200, -120, 0), (200, -80, 0), (160, -80, 0), (240, -120, 0), (280, -120, 0), (280, -80, 0), (240, -80, 0), (320, -120, 0), (360, -120, 0), (360, -80, 0), (320, -80, 0), (-360, -80, 0), (-320, -80, 0), (-320, -40, 0), (-360, -40, 0), (-280, -80, 0), (-240, -80, 0), (-240, -40, 0), (-280, -40, 0), (-200, -80, 0), (-160, -80, 0), (-160, -40, 0), (-200, -40, 0), (-120, -80, 0), (-80, -80, 0), (-80, -40, 0), (-120, -40, 0), (-40, -80, 0), (0, -80, 0), (0, -40, 0), (-40, -40, 0), (40, -80, 0), (80, -80, 0), (80, -40, 0), (40, -40, 0), (120, -80, 0), (160, -80, 0), (160, -40, 0), (120, -40, 0), (200, -80, 0), (240, -80, 0), (240, -40, 0), (200, -40, 0), (280, -80, 0), (320, -80, 0), (320, -40, 0), (280, -40, 0), (-320, -40, 0), (-280, -40, 0), (-280, 0, 0), (-320, 0, 0), (-240, -40, 0), (-200, -40, 0), (-200, 0, 0), (-240, 0, 0), (-160, -40, 0), (-120, -40, 0), (-120, 0, 0), (-160, 0, 0), (-80, -40, 0), (-40, -40, 0), (-40, 0, 0), (-80, 0, 0), (0, -40, 0), (40, -40, 0), (40, 0, 0), (0, 0, 0), (80, -40, 0), (120, -40, 0), (120, 0, 0), (80, 0, 0), (160, -40, 0), (200, -40, 0), (200, 0, 0), (160, 0, 0), (240, -40, 0), (280, -40, 0), (280, 0, 0), (240, 0, 0), (320, -40, 0), (360, -40, 0), (360, 0, 0), (320, 0, 0), (-360, 0, 0), (-320, 0, 0), (-320, 40, 0), (-360, 40, 0), (-280, 0, 0), (-240, 0, 0), (-240, 40, 0), (-280, 40, 0), (-200, 0, 0), (-160, 0, 0), (-160, 40, 0), (-200, 40, 0), (-120, 0, 0), (-80, 0, 0), (-80, 40, 0), (-120, 40, 0), (-40, 0, 0), (0, 0, 0), (0, 40, 0), (-40, 40, 0), (40, 0, 0), (80, 0, 0), (80, 40, 0), (40, 40, 0), (120, 0, 0), (160, 0, 0), (160, 40, 0), (120, 40, 0), (200, 0, 0), (240, 0, 0), (240, 40, 0), (200, 40, 0), (280, 0, 0), (320, 0, 0), (320, 40, 0), (280, 40, 0), (-320, 40, 0), (-280, 40, 0), (-280, 80, 0), (-320, 80, 0), (-240, 40, 0), (-200, 40, 0), (-200, 80, 0), (-240, 80, 0), (-160, 40, 0), (-120, 40, 0), (-120, 80, 0), (-160, 80, 0), (-80, 40, 0), (-40, 40, 0), (-40, 80, 0), (-80, 80, 0), (0, 40, 0), (40, 40, 0), (40, 80, 0), (0, 80, 0), (80, 40, 0), (120, 40, 0), (120, 80, 0), (80, 80, 0), (160, 40, 0), (200, 40, 0), (200, 80, 0), (160, 80, 0), (240, 40, 0), (280, 40, 0), (280, 80, 0), (240, 80, 0), (320, 40, 0), (360, 40, 0), (360, 80, 0), (320, 80, 0), (-360, 80, 0), (-320, 80, 0), (-320, 120, 0), (-360, 120, 0), (-280, 80, 0), (-240, 80, 0), (-240, 120, 0), (-280, 120, 0), (-200, 80, 0), (-160, 80, 0), (-160, 120, 0), (-200, 120, 0), (-120, 80, 0), (-80, 80, 0), (-80, 120, 0), (-120, 120, 0), (-40, 80, 0), (0, 80, 0), (0, 120, 0), (-40, 120, 0), (40, 80, 0), (80, 80, 0), (80, 120, 0), (40, 120, 0), (120, 80, 0), (160, 80, 0), (160, 120, 0), (120, 120, 0), (200, 80, 0), (240, 80, 0), (240, 120, 0), (200, 120, 0), (280, 80, 0), (320, 80, 0), (320, 120, 0), (280, 120, 0), (-320, 120, 0), (-280, 120, 0), (-280, 160, 0), (-320, 160, 0), (-240, 120, 0), (-200, 120, 0), (-200, 160, 0), (-240, 160, 0), (-160, 120, 0), (-120, 120, 0), (-120, 160, 0), (-160, 160, 0), (-80, 120, 0), (-40, 120, 0), (-40, 160, 0), (-80, 160, 0), (0, 120, 0), (40, 120, 0), (40, 160, 0), (0, 160, 0), (80, 120, 0), (120, 120, 0), (120, 160, 0), (80, 160, 0), (160, 120, 0), (200, 120, 0), (200, 160, 0), (160, 160, 0), (240, 120, 0), (280, 120, 0), (280, 160, 0), (240, 160, 0), (320, 120, 0), (360, 120, 0), (360, 160, 0), (320, 160, 0), (-360, 160, 0), (-320, 160, 0), (-320, 200, 0), (-360, 200, 0), (-280, 160, 0), (-240, 160, 0), (-240, 200, 0), (-280, 200, 0), (-200, 160, 0), (-160, 160, 0), (-160, 200, 0), (-200, 200, 0), (-120, 160, 0), (-80, 160, 0), (-80, 200, 0), (-120, 200, 0), (-40, 160, 0), (0, 160, 0), (0, 200, 0), (-40, 200, 0), (40, 160, 0), (80, 160, 0), (80, 200, 0), (40, 200, 0), (120, 160, 0), (160, 160, 0), (160, 200, 0), (120, 200, 0), (200, 160, 0), (240, 160, 0), (240, 200, 0), (200, 200, 0), (280, 160, 0), (320, 160, 0), (320, 200, 0), (280, 200, 0), (-320, 200, 0), (-280, 200, 0), (-280, 240, 0), (-320, 240, 0), (-240, 200, 0), (-200, 200, 0), (-200, 240, 0), (-240, 240, 0), (-160, 200, 0), (-120, 200, 0), (-120, 240, 0), (-160, 240, 0), (-80, 200, 0), (-40, 200, 0), (-40, 240, 0), (-80, 240, 0), (0, 200, 0), (40, 200, 0), (40, 240, 0), (0, 240, 0), (80, 200, 0), (120, 200, 0), (120, 240, 0), (80, 240, 0), (160, 200, 0), (200, 200, 0), (200, 240, 0), (160, 240, 0), (240, 200, 0), (280, 200, 0), (280, 240, 0), (240, 240, 0), (320, 200, 0), (360, 200, 0), (360, 240, 0), (320, 240, 0), (-360, 240, 0), (-320, 240, 0), (-320, 280, 0), (-360, 280, 0), (-280, 240, 0), (-240, 240, 0), (-240, 280, 0), (-280, 280, 0), (-200, 240, 0), (-160, 240, 0), (-160, 280, 0), (-200, 280, 0), (-120, 240, 0), (-80, 240, 0), (-80, 280, 0), (-120, 280, 0), (-40, 240, 0), (0, 240, 0), (0, 280, 0), (-40, 280, 0), (40, 240, 0), (80, 240, 0), (80, 280, 0), (40, 280, 0), (120, 240, 0), (160, 240, 0), (160, 280, 0), (120, 280, 0), (200, 240, 0), (240, 240, 0), (240, 280, 0), (200, 280, 0), (280, 240, 0), (320, 240, 0), (320, 280, 0), (280, 280, 0), (-320, 280, 0), (-280, 280, 0), (-280, 320, 0), (-320, 320, 0), (-240, 280, 0), (-200, 280, 0), (-200, 320, 0), (-240, 320, 0), (-160, 280, 0), (-120, 280, 0), (-120, 320, 0), (-160, 320, 0), (-80, 280, 0), (-40, 280, 0), (-40, 320, 0), (-80, 320, 0), (0, 280, 0), (40, 280, 0), (40, 320, 0), (0, 320, 0), (80, 280, 0), (120, 280, 0), (120, 320, 0), (80, 320, 0), (160, 280, 0), (200, 280, 0), (200, 320, 0), (160, 320, 0), (240, 280, 0), (280, 280, 0), (280, 320, 0), (240, 320, 0), (320, 280, 0), (360, 280, 0), (360, 320, 0), (320, 320, 0), (-360, 320, 0), (-320, 320, 0), (-320, 360, 0), (-360, 360, 0), (-280, 320, 0), (-240, 320, 0), (-240, 360, 0), (-280, 360, 0), (-200, 320, 0), (-160, 320, 0), (-160, 360, 0), (-200, 360, 0), (-120, 320, 0), (-80, 320, 0), (-80, 360, 0), (-120, 360, 0), (-40, 320, 0), (0, 320, 0), (0, 360, 0), (-40, 360, 0), (40, 320, 0), (80, 320, 0), (80, 360, 0), (40, 360, 0), (120, 320, 0), (160, 320, 0), (160, 360, 0), (120, 360, 0), (200, 320, 0), (240, 320, 0), (240, 360, 0), (200, 360, 0), (280, 320, 0), (320, 320, 0), (320, 360, 0), (280, 360, 0)]
                    color3f[] primvars:displayColor = [(0.25, 0.5, 1)]
                    custom bool primvars:doNotCastShadows = 1
                    uniform token purpose = "render"
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, -76.9000015258789)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }

        def Cube "originGuide"
        {
            uniform token purpose = "guide"
            double size = 1
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate"]
        }
    }

    def Plane "CollisionPlane" (
        apiSchemas = ["PhysicsCollisionAPI", "PhysicsMeshCollisionAPI", "PhysxTriangleMeshSimplificationCollisionAPI", "PhysxConvexHullCollisionAPI", "PhysxTriangleMeshCollisionAPI"]
    )
    {
        uniform token axis = "Y"
        uniform token physics:approximation = "meshSimplification"
        uniform token purpose = "guide"
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-2.1875551663665316e-31, -1.3429638126307069, -4.833400605306876e-30)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def DomeLight "DomeLight" (
        apiSchemas = ["ShapingAPI"]
    )
    {
        float exposure = 0
        float intensity = 1000012.8
        bool normalize = 0
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token texture:format = "latlong"
        token visibility = "invisible"
        double3 xformOp:rotateXYZ = (270, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }
}

def Xform "humanoid" (
    apiSchemas = None
)
{
    double3 xformOp:rotateXYZ = (-90, -90, 0)
    double3 xformOp:scale = (200, 200, 200)
    double3 xformOp:translate = (1.6486811915683575e-14, 230.68998659866978, 44.23666670779352)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Capsule "upper_waist" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.12, -0.06, -0.06), (0.12, 0.06, 0.06)]
        double height = 0.11999999731779099
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.05999999865889549
        quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
        double3 xformOp:scale = (0.9999999657714589, 0.9999999657714589, 1)
        float3 xformOp:translate = (-0.01, 0, -0.12)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsRevoluteJoint "RevoluteJoint"
        {
            uniform token physics:axis = "X"
            prepend rel physics:body0 = </humanoid/torso>
            rel physics:body1 = </humanoid/upper_waist>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (3.4228512e-10, 0.009999996, -0.06251228)
            point3f physics:localPos1 = (-3.0722073e-16, -4.4027977e-9, 0.057487722)
            quatf physics:localRot0 = (1, 1.7114271e-8, -4.0392058e-16, -4.592167e-16)
            quatf physics:localRot1 = (1, -6.717943e-8, 1.0387046e-15, 7.968573e-16)
            float physics:lowerLimit = 168.40001
            float physics:upperLimit = 18.5
        }
    }

    def Capsule "butt" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.16, -0.09, -0.09), (0.16, 0.09, 0.09)]
        double height = 0.14000000059604645
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.09000000357627869
        quatf xformOp:orient = (0.70710117, -0.002828416, -0.002828416, 0.7071011)
        double3 xformOp:scale = (0.999999965771459, 0.9999999657684729, 0.999999999997014)
        float3 xformOp:translate = (-0.029339362, 0, -0.42515865)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Capsule "left_left_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.13247512, -0.027, -0.027), (0.13247512, 0.027, 0.027)]
        double height = 0.21095024049282074
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:collisionEnabled = 1
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.027000000700354576
        quatf xformOp:orient = (0.99886525, -0.00018982466, -0.0039954777, 0.047457818)
        double3 xformOp:scale = (1.0000000000769627, 1.7093335749676934, 0.9999999999970143)
        float3 xformOp:translate = (0.14569573, 0.10324298, -1.2417644)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </humanoid/left_shin>
            rel physics:body1 = </humanoid/left_left_foot>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 10
            float physics:coneAngle1Limit = 3
            point3f physics:localPos0 = (0.20823716, 0.0076192473, -0.023996381)
            point3f physics:localPos1 = (-0.059315998, -1.7402957e-8, 0.025209412)
            quatf physics:localRot0 = (0.70631003, -0.033558015, -0.70631003, 0.033557996)
            quatf physics:localRot1 = (1, -1.7206126e-8, -6.874151e-9, -9.600128e-9)
        }
    }

    def Capsule "torso" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.14, -0.07, -0.07), (0.14, 0.07, 0.07)]
        double height = 0.14000000059604645
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        bool primvars:doNotCastShadows = 0
        double radius = 0.07000000029802322
        quatf xformOp:orient = (0.70710677, 0, 0, 0.70710677)
        double3 xformOp:scale = (0.9999999657714589, 0.9999999657714589, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/head>
            rel physics:body1 = </humanoid/torso>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (4.626324e-9, 2.2763187e-16, -0.10452765)
            point3f physics:localPos1 = (3.8598386e-16, -4.6263144e-9, 0.08547241)
            quatf physics:localRot0 = (0.70710677, 1.21016175e-8, 1.21016175e-8, 0.70710677)
            quatf physics:localRot1 = (1, -6.717943e-8, -1.2607494e-15, -1.2450902e-15)
        }
    }

    def Capsule "lower_waist" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.12, -0.06, -0.06), (0.12, 0.06, 0.06)]
        double height = 0.11999999731779099
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.05999999865889549
        quatf xformOp:orient = (0.7071054, -0.0014142108, -0.0014142108, 0.70710534)
        double3 xformOp:scale = (0.999999965771459, 0.999999965771034, 0.999999999999575)
        float3 xformOp:translate = (-0.01, -4.9303807e-32, -0.26)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint0"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/butt>
            rel physics:body1 = </humanoid/lower_waist>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 5
            float physics:coneAngle1Limit = 5
            point3f physics:localPos0 = (6.9778666e-10, -0.020386104, 0.096486606)
            point3f physics:localPos1 = (5.3670676e-15, -1.555662e-7, -0.068512514)
            quatf physics:localRot0 = (0.999998, 0.001999996, 6.8456664e-11, 3.2337926e-16)
            quatf physics:localRot1 = (1, -2.893216e-10, -2.845536e-16, 3.239292e-16)
        }

        def PhysicsRevoluteJoint "RevoluteJoint"
        {
            uniform token physics:axis = "X"
            prepend rel physics:body0 = </humanoid/upper_waist>
            rel physics:body1 = </humanoid/lower_waist>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (2.1607258e-11, 0.0002776865, -0.070008315)
            point3f physics:localPos1 = (-4.9761834e-14, -0.0000022813322, 0.06999223)
            quatf physics:localRot0 = (0.99999803, -0.0019834419, 3.3945048e-11, -6.041868e-8)
            quatf physics:localRot1 = (1, 0.000016554273, -9.103337e-13, 8.2033874e-10)
            float physics:lowerLimit = 50
            float physics:upperLimit = 143.90001
        }
    }

    def Capsule "right_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.23007353, -0.06, -0.06), (0.23007353, 0.06, 0.06)]
        double height = 0.3401470482349396
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.05999999865889549
        quatf xformOp:orient = (0.8061833, -0.0031549167, 0.59130055, 0.020547472)
        double3 xformOp:scale = (1.0000000375112343, 0.9999999999999974, 1.0000000375112317)
        float3 xformOp:translate = (0.04623651, -0.09499998, -0.6536436)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/butt>
            rel physics:body1 = </humanoid/right_thigh>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 60
            float physics:coneAngle1Limit = 60
            point3f physics:localPos0 = (-0.100258164, -0.020000054, -0.031222979)
            point3f physics:localPos1 = (-0.17885435, -3.4007552e-8, 3.0009744e-8)
            quatf physics:localRot0 = (0.5146995, 0.4997839, 0.4997839, -0.48530042)
            quatf physics:localRot1 = (1, -1.7518662e-10, -7.699556e-10, 3.5974953e-8)
        }

        def PhysicsSphericalJoint "SphericalJoint0"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </World/R_Leg/Link39>
            rel physics:body1 = </humanoid/right_thigh>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (4.8412805, 0.11134226, -1.8839417)
            point3f physics:localPos1 = (0.17814116, -0.0012425511, 0.062619776)
            quatf physics:localRot0 = (0.9874597, -0.024689341, -0.15085965, -0.039435312)
            quatf physics:localRot1 = (1, -2.7305984e-9, 5.1948745e-10, -1.2315547e-8)
        }
    }

    def Capsule "right_shin" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.199, -0.049, -0.049), (0.199, 0.049, 0.049)]
        double height = 0.30000001192092896
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.04899999871850014
        quatf xformOp:orient = (0.70375663, 1.821159e-14, 0.7104411, -1.9766371e-14)
        double3 xformOp:scale = (0.9999999657684734, 1, 0.9999999657684734)
        float3 xformOp:translate = (0.10543556, -0.08999998, -1.0083488)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/right_thigh>
            rel physics:body1 = </humanoid/right_shin>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 70
            float physics:coneAngle1Limit = 30
            point3f physics:localPos0 = (0.20351815, -0.0009832453, -0.000028818187)
            point3f physics:localPos1 = (-0.17954089, 2.9802183e-10, 8.455963e-8)
            quatf physics:localRot0 = (0.9997839, 0.014699526, 0.00021605063, -0.014699501)
            quatf physics:localRot1 = (1, 9.991391e-11, -3.210139e-11, 2.4978293e-8)
        }
    }

    def Capsule "left_thigh" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.23007353, -0.06, -0.06), (0.23007353, 0.06, 0.06)]
        double height = 0.3401470482349396
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.05999999865889549
        quatf xformOp:orient = (0.8061833, 0.0031549165, 0.59130055, -0.020547474)
        double3 xformOp:scale = (1.0000000375112346, 0.9999999999999974, 1.0000000375112317)
        float3 xformOp:translate = (0.04559411, 0.09499998, -0.65373963)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/butt>
            rel physics:body1 = </humanoid/left_thigh>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 60
            float physics:coneAngle1Limit = 60
            point3f physics:localPos0 = (0.1004289, -0.020000076, -0.025418501)
            point3f physics:localPos1 = (-0.18466125, 5.126955e-8, 5.8343733e-8)
            quatf physics:localRot0 = (-0.48530045, -0.4997839, -0.49978393, 0.5146995)
            quatf physics:localRot1 = (1, 2.757766e-10, -4.363468e-10, -1.3285012e-8)
        }

        def PhysicsSphericalJoint "SphericalJoint0"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </World/L_Leg/Link39>
            rel physics:body1 = </humanoid/left_thigh>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (4.4416714, -0.47280765, -2.0053635)
            point3f physics:localPos1 = (0.176032, -0.0003870004, 0.0633833)
            quatf physics:localRot0 = (0.9874597, 0.024689341, -0.15085965, 0.03943526)
            quatf physics:localRot1 = (1, -3.15648e-8, -2.511672e-8, -2.1244537e-7)
        }
    }

    def Capsule "left_shin" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.199, -0.049, -0.049), (0.199, 0.049, 0.049)]
        double height = 0.30000001192092896
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.04899999871850014
        quatf xformOp:orient = (0.7099295, 1.0097533e-10, 0.7042727, 9.9980225e-11)
        double3 xformOp:scale = (0.9999999657684734, 1, 0.9999999657684734)
        float3 xformOp:translate = (0.108776875, 0.08999998, -1.0086057)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/left_thigh>
            rel physics:body1 = </humanoid/left_shin>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 70
            float physics:coneAngle1Limit = 30
            point3f physics:localPos0 = (0.213185, 0.0012674384, -0.00003727637)
            point3f physics:localPos1 = (-0.16986984, -2.9802302e-10, -1.6348377e-8)
            quatf physics:localRot0 = (0.9997839, -0.014699526, 0.00021605135, 0.014699551)
            quatf physics:localRot1 = (1, 9.991391e-11, -3.210139e-11, 2.4978293e-8)
        }
    }

    def Capsule "right_upper_arm" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.17856407, -0.04, -0.04), (0.17856407, 0.04, 0.04)]
        double height = 0.277128130197525
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:collisionEnabled = 1
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.03999999910593033
        quatf xformOp:orient = (0.8880738, -2.344026e-17, 0.3250576, -0.3250576)
        double3 xformOp:scale = (1.0000000274927816, 1, 1.0000000274927814)
        float3 xformOp:translate = (0.08, -0.25, -0.02)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/torso>
            rel physics:body1 = </humanoid/right_upper_arm>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 60
            float physics:coneAngle1Limit = 60
            point3f physics:localPos0 = (-0.16406032, 0.0059395498, 0.06593957)
            point3f physics:localPos1 = (-0.14885175, 8.642119e-8, -2.1533529e-8)
            quatf physics:localRot0 = (-0.3981126, -0.22985043, -0.22985046, 0.8578135)
            quatf physics:localRot1 = (1, -3.527897e-8, -6.442418e-8, -1.3873361e-7)
        }
    }

    def Capsule "right_lower_arm" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.16956407, -0.031, -0.031), (0.16956407, 0.031, 0.031)]
        double height = 0.277128130197525
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:collisionEnabled = 1
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.03099999949336052
        quatf xformOp:orient = (0.87745565, 0.18707867, -0.37568983, -0.23222893)
        double3 xformOp:scale = (1.0000000274927816, 1, 1.0000000274927816)
        float3 xformOp:translate = (0.2674666, -0.4122792, -0.019615112)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/right_upper_arm>
            rel physics:body1 = </humanoid/right_lower_arm>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 60
            float physics:coneAngle1Limit = 60
            point3f physics:localPos0 = (0.16940957, 0.007592348, 0.0075914008)
            point3f physics:localPos1 = (-0.14449693, 2.1429993e-7, -7.515146e-7)
            quatf physics:localRot0 = (-0.5773502, 1.3498732e-8, 0.5773503, -0.5773503)
            quatf physics:localRot1 = (1, -1.4948911e-8, -5.133376e-9, 1.35649545e-8)
        }
    }

    def Sphere "right_hand" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        float3[] extent = [(-0.04, -0.04, -0.04), (0.04, 0.04, 0.04)]
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        bool primvars:doNotCastShadows = 0
        double radius = 0.03999999910593033
        quatf xformOp:orient = (0.82587844, 0.36374828, 0.012394676, -0.43064874)
        double3 xformOp:scale = (1, 0.9999999999999998, 1)
        float3 xformOp:translate = (0.36253342, -0.49772084, 0.06961511)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/right_lower_arm>
            rel physics:body1 = </humanoid/right_hand>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (0.15588453, 1.3974613e-9, -6.796325e-8)
            point3f physics:localPos1 = (9.394696e-9, -2.3841857e-9, -7.174489e-8)
            quatf physics:localRot0 = (0.8880738, 1.5626841e-16, 0.3250576, -0.3250576)
            quatf physics:localRot1 = (1, 1.110223e-16, -1.2325952e-32, 1.110223e-16)
        }

        def PhysicsSphericalJoint "SphericalJoint0"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </World/R_Hand/Link25>
            rel physics:body1 = </humanoid/right_hand>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (3.4528792, 0.15267181, 0.74334717)
            point3f physics:localPos1 = (-0.01208946, 0.022705637, 0.029896328)
            quatf physics:localRot0 = (0.5927486, 0.56172353, -0.5752199, -0.047305778)
            quatf physics:localRot1 = (1, 1.3810015e-9, -3.621815e-8, -1.9306013e-8)
        }
    }

    def Capsule "left_upper_arm" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.17856407, -0.04, -0.04), (0.17856407, 0.04, 0.04)]
        double height = 0.277128130197525
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:collisionEnabled = 1
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.03999999910593033
        quatf xformOp:orient = (0.8880738, -3.9067102e-17, 0.3250576, 0.3250576)
        double3 xformOp:scale = (1.0000000274927816, 1.0000000274927816, 1.0000000000000002)
        float3 xformOp:translate = (0.08, 0.25, -0.02)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/torso>
            rel physics:body1 = </humanoid/left_upper_arm>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 60
            float physics:coneAngle1Limit = 60
            point3f physics:localPos0 = (0.16236147, 0.0076385126, 0.06763817)
            point3f physics:localPos1 = (-0.15179417, -8.363798e-8, -2.7227208e-7)
            quatf physics:localRot0 = (0.8578135, 0.22985044, 0.22985044, -0.39811257)
            quatf physics:localRot1 = (1, 1.151775e-8, 3.6831962e-9, 1.2114775e-8)
        }
    }

    def Capsule "left_lower_arm" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.16956407, -0.031, -0.031), (0.16956407, 0.031, 0.031)]
        double height = 0.277128130197525
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:collisionEnabled = 1
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.03099999949336052
        quatf xformOp:orient = (0.8038198, 0.39174122, -0.15059908, 0.42158332)
        double3 xformOp:scale = (1.0000000274927818, 0.9999999999999998, 1.0000000274927816)
        float3 xformOp:translate = (0.26829895, 0.42137083, -0.019615112)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/left_upper_arm>
            rel physics:body1 = </humanoid/left_lower_arm>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 60
            float physics:coneAngle1Limit = 30
            point3f physics:localPos0 = (0.1705359, -0.0053387485, 0.005338526)
            point3f physics:localPos1 = (-0.14787668, -3.9249144e-8, -2.0177293e-7)
            quatf physics:localRot0 = (-0.5773502, -1.296793e-8, 0.5773503, 0.5773503)
            quatf physics:localRot1 = (1, 1.296793e-8, -4.602573e-9, -1.40957575e-8)
        }
    }

    def Sphere "left_hand" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        float3[] extent = [(-0.04, -0.04, -0.04), (0.04, 0.04, 0.04)]
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.03999999910593033
        quatf xformOp:orient = (0.8998435, 0.25980964, 0.25488308, 0.24044785)
        double3 xformOp:scale = (0.9999999999999994, 0.9999999999999998, 0.9999999999999997)
        float3 xformOp:translate = (0.36170107, 0.50862914, 0.06961511)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </humanoid/left_lower_arm>
            rel physics:body1 = </humanoid/left_hand>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (0.15588453, -1.3974607e-9, -6.796325e-8)
            point3f physics:localPos1 = (9.394696e-9, 2.3841857e-9, -7.174489e-8)
            quatf physics:localRot0 = (0.8880738, 1.5626841e-16, 0.3250576, 0.3250576)
            quatf physics:localRot1 = (1, 1.110223e-16, -1.2325952e-32, 1.110223e-16)
        }

        def PhysicsSphericalJoint "SphericalJoint0"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </World/L_Hand/Link25>
            rel physics:body1 = </humanoid/left_hand>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (3.7159407, 0.090911865, -0.4231186)
            point3f physics:localPos1 = (-0.014509173, 0.020102888, 0.029097784)
            quatf physics:localRot0 = (0.816515, 0.013690856, -0.4560559, 0.35373545)
            quatf physics:localRot1 = (1, -5.450289e-9, -1.2494229e-8, -1.1804506e-9)
        }
    }

    def Sphere "head" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        float3[] extent = [(-0.09, -0.09, -0.09), (0.09, 0.09, 0.09)]
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.09000000357627869
        quatf xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1.0000000000000002, 1, 1.0000000000000002)
        float3 xformOp:translate = (-2.7755576e-17, 4.9303807e-32, 0.19)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "X"
            rel physics:body0 = </World/Head/Link22>
            rel physics:body1 = </humanoid/head>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            point3f physics:localPos0 = (5.747227, -0.309198, -1.7633324)
            point3f physics:localPos1 = (4.626322e-9, -2.131804e-17, 0.09600792)
            quatf physics:localRot0 = (-0.70710677, -7.850462e-17, 0.70710677, -7.850462e-17)
            quatf physics:localRot1 = (1, 1.110223e-16, -1.2325952e-32, 1.110223e-16)
        }
    }

    def Capsule "right_right_foot" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysxRigidBodyAPI", "PhysicsMassAPI", "PhysicsCollisionAPI", "PhysxCollisionAPI"]
    )
    {
        uniform token axis = "X"
        float3[] extent = [(-0.13247512, -0.027, -0.027), (0.13247512, 0.027, 0.027)]
        double height = 0.21095024049282074
        rel material:binding = </World/Looks/Oak_Planks> (
            bindMaterialAs = "weakerThanDescendants"
        )
        bool physics:collisionEnabled = 1
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        bool physics:rigidBodyEnabled = 1
        float physxRigidBody:maxAngularVelocity = 100
        float physxRigidBody:maxLinearVelocity = 500
        color3f[] primvars:displayColor = [(0.97, 0.38, 0.06)]
        double radius = 0.027000000700354576
        quatf xformOp:orient = (0.9988621, -0.00022431753, 0.004721308, -0.04745767)
        double3 xformOp:scale = (1.0000000000769629, 1.6643591248642404, 0.9999999999970143)
        float3 xformOp:translate = (0.13839465, -0.10496982, -1.2355257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def PhysicsSphericalJoint "SphericalJoint"
        {
            uniform token physics:axis = "Z"
            rel physics:body0 = </humanoid/right_shin>
            rel physics:body1 = </humanoid/right_right_foot>
            float physics:breakForce = inf
            float physics:breakTorque = inf
            float physics:coneAngle0Limit = 10
            float physics:coneAngle1Limit = 3
            point3f physics:localPos0 = (0.2038142, -0.009142313, -0.026083602)
            point3f physics:localPos1 = (-0.06146563, 2.237986e-9, 0.023040975)
            quatf physics:localRot0 = (0.70631003, 0.033558015, -0.70631003, -0.033558026)
            quatf physics:localRot1 = (1, -4.5383257e-9, -1.549979e-8, -9.944213e-9)
        }
    }
}

